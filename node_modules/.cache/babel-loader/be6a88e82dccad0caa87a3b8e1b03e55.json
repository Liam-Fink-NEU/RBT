{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertNode = require(\"./Node.js\").convert;\n\nconst impl = utils.implSymbol;\n\nclass TreeWalker {\n  constructor() {\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  parentNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].parentNode());\n  }\n\n  firstChild() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].firstChild());\n  }\n\n  lastChild() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].lastChild());\n  }\n\n  previousSibling() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].previousSibling());\n  }\n\n  nextSibling() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].nextSibling());\n  }\n\n  previousNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].previousNode());\n  }\n\n  nextNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].nextNode());\n  }\n\n  get root() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"root\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"root\"]);\n    });\n  }\n\n  get whatToShow() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"whatToShow\"];\n  }\n\n  get filter() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"filter\"]);\n  }\n\n  get currentNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"currentNode\"]);\n  }\n\n  set currentNode(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = convertNode(V, {\n      context: \"Failed to set the 'currentNode' property on 'TreeWalker': The provided value\"\n    });\n    this[impl][\"currentNode\"] = V;\n  }\n\n}\n\nObject.defineProperties(TreeWalker.prototype, {\n  parentNode: {\n    enumerable: true\n  },\n  firstChild: {\n    enumerable: true\n  },\n  lastChild: {\n    enumerable: true\n  },\n  previousSibling: {\n    enumerable: true\n  },\n  nextSibling: {\n    enumerable: true\n  },\n  previousNode: {\n    enumerable: true\n  },\n  nextNode: {\n    enumerable: true\n  },\n  root: {\n    enumerable: true\n  },\n  whatToShow: {\n    enumerable: true\n  },\n  filter: {\n    enumerable: true\n  },\n  currentNode: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"TreeWalker\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'TreeWalker'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(TreeWalker.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(TreeWalker.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: TreeWalker,\n  expose: {\n    Window: {\n      TreeWalker\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../traversal/TreeWalker-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/TreeWalker.js"],"names":["conversions","require","utils","convertNode","convert","impl","implSymbol","TreeWalker","constructor","TypeError","parentNode","module","exports","is","tryWrapperForImpl","firstChild","lastChild","previousSibling","nextSibling","previousNode","nextNode","root","getSameObject","whatToShow","filter","currentNode","V","context","Object","defineProperties","prototype","enumerable","Symbol","toStringTag","value","configurable","iface","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","create","constructorArgs","privateData","setup","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","interface","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertNode = require(\"./Node.js\").convert;\nconst impl = utils.implSymbol;\n\nclass TreeWalker {\n  constructor() {\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  parentNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].parentNode());\n  }\n\n  firstChild() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].firstChild());\n  }\n\n  lastChild() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].lastChild());\n  }\n\n  previousSibling() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].previousSibling());\n  }\n\n  nextSibling() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].nextSibling());\n  }\n\n  previousNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].previousNode());\n  }\n\n  nextNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].nextNode());\n  }\n\n  get root() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"root\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"root\"]);\n    });\n  }\n\n  get whatToShow() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"whatToShow\"];\n  }\n\n  get filter() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"filter\"]);\n  }\n\n  get currentNode() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"currentNode\"]);\n  }\n\n  set currentNode(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = convertNode(V, { context: \"Failed to set the 'currentNode' property on 'TreeWalker': The provided value\" });\n\n    this[impl][\"currentNode\"] = V;\n  }\n}\nObject.defineProperties(TreeWalker.prototype, {\n  parentNode: { enumerable: true },\n  firstChild: { enumerable: true },\n  lastChild: { enumerable: true },\n  previousSibling: { enumerable: true },\n  nextSibling: { enumerable: true },\n  previousNode: { enumerable: true },\n  nextNode: { enumerable: true },\n  root: { enumerable: true },\n  whatToShow: { enumerable: true },\n  filter: { enumerable: true },\n  currentNode: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"TreeWalker\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'TreeWalker'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(TreeWalker.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(TreeWalker.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: TreeWalker,\n  expose: {\n    Window: { TreeWalker }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../traversal/TreeWalker-impl.js\");\n"]},"metadata":{},"sourceType":"script"}