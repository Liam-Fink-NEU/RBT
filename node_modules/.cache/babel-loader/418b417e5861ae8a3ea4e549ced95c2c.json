{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertAddEventListenerOptions = require(\"./AddEventListenerOptions.js\").convert;\n\nconst convertEventListenerOptions = require(\"./EventListenerOptions.js\").convert;\n\nconst convertEvent = require(\"./Event.js\").convert;\n\nconst impl = utils.implSymbol;\n\nclass EventTarget {\n  constructor() {\n    return iface.setup(Object.create(new.target.prototype));\n  }\n\n  addEventListener(type, callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'addEventListener' on 'EventTarget': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[2];\n\n      if (curArg !== undefined) {\n        if (curArg === null || curArg === undefined) {\n          curArg = convertAddEventListenerOptions(curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else if (utils.isObject(curArg)) {\n          curArg = convertAddEventListenerOptions(curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\" + \" dictionary\"\n          });\n        } else if (typeof curArg === \"boolean\") {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n          });\n        }\n      }\n\n      args.push(curArg);\n    }\n    return this[impl].addEventListener(...args);\n  }\n\n  removeEventListener(type, callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'removeEventListener' on 'EventTarget': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[2];\n\n      if (curArg !== undefined) {\n        if (curArg === null || curArg === undefined) {\n          curArg = convertEventListenerOptions(curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else if (utils.isObject(curArg)) {\n          curArg = convertEventListenerOptions(curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\" + \" dictionary\"\n          });\n        } else if (typeof curArg === \"boolean\") {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n          });\n        }\n      }\n\n      args.push(curArg);\n    }\n    return this[impl].removeEventListener(...args);\n  }\n\n  dispatchEvent(event) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'dispatchEvent' on 'EventTarget': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertEvent(curArg, {\n        context: \"Failed to execute 'dispatchEvent' on 'EventTarget': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].dispatchEvent(...args);\n  }\n\n}\n\nObject.defineProperties(EventTarget.prototype, {\n  addEventListener: {\n    enumerable: true\n  },\n  removeEventListener: {\n    enumerable: true\n  },\n  dispatchEvent: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"EventTarget\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'EventTarget'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(EventTarget.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(EventTarget.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: EventTarget,\n  expose: {\n    Window: {\n      EventTarget\n    },\n    Worker: {\n      EventTarget\n    },\n    AudioWorklet: {\n      EventTarget\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../events/EventTarget-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js"],"names":["conversions","require","utils","convertAddEventListenerOptions","convert","convertEventListenerOptions","convertEvent","impl","implSymbol","EventTarget","constructor","iface","setup","Object","create","new","target","prototype","addEventListener","type","callback","module","exports","is","TypeError","arguments","length","args","curArg","context","push","undefined","tryImplForWrapper","isObject","removeEventListener","dispatchEvent","event","defineProperties","enumerable","Symbol","toStringTag","value","configurable","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","constructorArgs","privateData","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","interface","expose","Window","Worker","AudioWorklet"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertAddEventListenerOptions = require(\"./AddEventListenerOptions.js\").convert;\nconst convertEventListenerOptions = require(\"./EventListenerOptions.js\").convert;\nconst convertEvent = require(\"./Event.js\").convert;\nconst impl = utils.implSymbol;\n\nclass EventTarget {\n  constructor() {\n    return iface.setup(Object.create(new.target.prototype));\n  }\n\n  addEventListener(type, callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'addEventListener' on 'EventTarget': 2 arguments required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[2];\n      if (curArg !== undefined) {\n        if (curArg === null || curArg === undefined) {\n          curArg = convertAddEventListenerOptions(curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else if (utils.isObject(curArg)) {\n          curArg = convertAddEventListenerOptions(curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\" + \" dictionary\"\n          });\n        } else if (typeof curArg === \"boolean\") {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n          });\n        }\n      }\n      args.push(curArg);\n    }\n    return this[impl].addEventListener(...args);\n  }\n\n  removeEventListener(type, callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'removeEventListener' on 'EventTarget': 2 arguments required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[2];\n      if (curArg !== undefined) {\n        if (curArg === null || curArg === undefined) {\n          curArg = convertEventListenerOptions(curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else if (utils.isObject(curArg)) {\n          curArg = convertEventListenerOptions(curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\" + \" dictionary\"\n          });\n        } else if (typeof curArg === \"boolean\") {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n          });\n        } else {\n          curArg = conversions[\"boolean\"](curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n          });\n        }\n      }\n      args.push(curArg);\n    }\n    return this[impl].removeEventListener(...args);\n  }\n\n  dispatchEvent(event) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'dispatchEvent' on 'EventTarget': 1 argument required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertEvent(curArg, { context: \"Failed to execute 'dispatchEvent' on 'EventTarget': parameter 1\" });\n      args.push(curArg);\n    }\n    return this[impl].dispatchEvent(...args);\n  }\n}\nObject.defineProperties(EventTarget.prototype, {\n  addEventListener: { enumerable: true },\n  removeEventListener: { enumerable: true },\n  dispatchEvent: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"EventTarget\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'EventTarget'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(EventTarget.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(EventTarget.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: EventTarget,\n  expose: {\n    Window: { EventTarget },\n    Worker: { EventTarget },\n    AudioWorklet: { EventTarget }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../events/EventTarget-impl.js\");\n"]},"metadata":{},"sourceType":"script"}