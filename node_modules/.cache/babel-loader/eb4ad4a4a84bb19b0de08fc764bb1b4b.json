{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst MouseEvent = require(\"../generated/MouseEvent\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  isLabelable,\n  isDisabled\n} = require(\"../helpers/form-controls\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nfunction sendClickToAssociatedNode(node) {\n  fireAnEvent(\"click\", node, MouseEvent, {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  });\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._hasActivationBehavior = true;\n  }\n\n  get control() {\n    if (this.hasAttributeNS(null, \"for\")) {\n      const forValue = this.getAttributeNS(null, \"for\");\n\n      if (forValue === \"\") {\n        return null;\n      }\n\n      const root = this.getRootNode({});\n\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, \"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n\n      return null;\n    }\n\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n\n    if (node) {\n      return node.form;\n    }\n\n    return null;\n  }\n\n  _activationBehavior() {\n    const node = this.control;\n\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLabelElement-impl.js"],"names":["HTMLElementImpl","require","implementation","MouseEvent","domSymbolTree","NODE_TYPE","isLabelable","isDisabled","fireAnEvent","sendClickToAssociatedNode","node","bubbles","cancelable","view","ownerDocument","defaultView","screenX","screenY","clientX","clientY","button","detail","relatedTarget","HTMLLabelElementImpl","constructor","args","privateData","_hasActivationBehavior","control","hasAttributeNS","forValue","getAttributeNS","root","getRootNode","descendant","treeIterator","nodeType","ELEMENT_NODE","form","_activationBehavior","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { isLabelable, isDisabled } = require(\"../helpers/form-controls\");\nconst { fireAnEvent } = require(\"../helpers/events\");\n\nfunction sendClickToAssociatedNode(node) {\n  fireAnEvent(\"click\", node, MouseEvent, {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  });\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._hasActivationBehavior = true;\n  }\n\n  get control() {\n    if (this.hasAttributeNS(null, \"for\")) {\n      const forValue = this.getAttributeNS(null, \"for\");\n      if (forValue === \"\") {\n        return null;\n      }\n      const root = this.getRootNode({});\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE &&\n          descendant.getAttributeNS(null, \"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n      return null;\n    }\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n    if (node) {\n      return node.form;\n    }\n    return null;\n  }\n\n  _activationBehavior() {\n    const node = this.control;\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}