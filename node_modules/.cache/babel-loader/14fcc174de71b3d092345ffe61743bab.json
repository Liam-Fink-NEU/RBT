{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst NodeImpl = require(\"./Node-impl\").implementation;\n\nconst ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\n\nconst NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nconst {\n  TEXT_NODE\n} = require(\"../node-type\");\n\nconst {\n  MUTATION_TYPE,\n  queueMutationRecord\n} = require(\"../helpers/mutation-observers\");\n\nclass CharacterDataImpl extends NodeImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._data = privateData.data;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    this.replaceData(0, this.length, data);\n  }\n\n  get length() {\n    return this._data.length;\n  }\n\n  substringData(offset, count) {\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      return this._data.slice(offset);\n    }\n\n    return this._data.slice(offset, offset + count);\n  }\n\n  appendData(data) {\n    this.replaceData(this.length, 0, data);\n  }\n\n  insertData(offset, data) {\n    this.replaceData(offset, 0, data);\n  }\n\n  deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  }\n\n  replaceData(offset, count, data) {\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      count = length - offset;\n    }\n\n    const start = this._data.slice(0, offset);\n\n    const end = this._data.slice(offset + count);\n\n    queueMutationRecord(MUTATION_TYPE.CHARACTER_DATA, this, null, null, this._data, [], [], null, null);\n    this._data = start + data + end; // TODO: range stuff\n\n    if (this.nodeType === TEXT_NODE && this.parentNode) {\n      this.parentNode._childTextContentChangeSteps();\n    }\n  }\n\n}\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\nmodule.exports = {\n  implementation: CharacterDataImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/CharacterData-impl.js"],"names":["DOMException","require","mixin","NodeImpl","implementation","ChildNodeImpl","NonDocumentTypeChildNodeImpl","TEXT_NODE","MUTATION_TYPE","queueMutationRecord","CharacterDataImpl","constructor","args","privateData","_data","data","replaceData","length","substringData","offset","count","slice","appendData","insertData","deleteData","start","end","CHARACTER_DATA","nodeType","parentNode","_childTextContentChangeSteps","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst { mixin } = require(\"../../utils\");\nconst NodeImpl = require(\"./Node-impl\").implementation;\nconst ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\nconst NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nconst { TEXT_NODE } = require(\"../node-type\");\nconst { MUTATION_TYPE, queueMutationRecord } = require(\"../helpers/mutation-observers\");\n\nclass CharacterDataImpl extends NodeImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._data = privateData.data;\n  }\n\n  get data() {\n    return this._data;\n  }\n  set data(data) {\n    this.replaceData(0, this.length, data);\n  }\n\n  get length() {\n    return this._data.length;\n  }\n\n  substringData(offset, count) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      return this._data.slice(offset);\n    }\n\n    return this._data.slice(offset, offset + count);\n  }\n\n  appendData(data) {\n    this.replaceData(this.length, 0, data);\n  }\n\n  insertData(offset, data) {\n    this.replaceData(offset, 0, data);\n  }\n\n  deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  }\n\n  replaceData(offset, count, data) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      count = length - offset;\n    }\n\n    const start = this._data.slice(0, offset);\n    const end = this._data.slice(offset + count);\n\n    queueMutationRecord(MUTATION_TYPE.CHARACTER_DATA, this, null, null, this._data, [], [], null, null);\n\n    this._data = start + data + end;\n\n    // TODO: range stuff\n\n    if (this.nodeType === TEXT_NODE && this.parentNode) {\n      this.parentNode._childTextContentChangeSteps();\n    }\n  }\n}\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\n\nmodule.exports = {\n  implementation: CharacterDataImpl\n};\n"]},"metadata":{},"sourceType":"script"}