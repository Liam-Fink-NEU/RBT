{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst querystring = require(\"querystring\");\n\nconst DOMException = require(\"domexception\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\n\nconst {\n  setupForSimpleEventAccessors\n} = require(\"../helpers/create-event-accessor\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super([], privateData);\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n    this._ownerDocument = privateData.window.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n\n    this._fireProgressEvent(\"abort\");\n\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    fireAnEvent(name, this, ProgressEvent, props);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.readyState = READY_STATES.LOADING;\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\":\n            {\n              this.result = new Uint8Array(data).buffer;\n              break;\n            }\n\n          case \"binaryString\":\n            {\n              this.result = data.toString(\"binary\");\n              break;\n            }\n\n          case \"dataURL\":\n            {\n              // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n              let dataUrl = \"data:\";\n              const contentType = MIMEType.parse(file.type);\n\n              if (contentType && contentType.type === \"text\") {\n                const fallbackEncoding = whatwgEncoding.getBOMEncoding(data) || whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n                const decoded = whatwgEncoding.decode(data, fallbackEncoding);\n                contentType.parameters.set(\"charset\", encoding);\n                dataUrl += contentType.toString();\n                dataUrl += \",\";\n                dataUrl += querystring.escape(decoded);\n              } else {\n                if (contentType) {\n                  dataUrl += contentType.toString();\n                }\n\n                dataUrl += \";base64,\";\n                dataUrl += data.toString(\"base64\");\n              }\n\n              this.result = dataUrl;\n              break;\n            }\n\n          case \"text\":\n            {\n              this.result = whatwgEncoding.decode(data, encoding);\n              break;\n            }\n        }\n\n        this.readyState = READY_STATES.DONE;\n\n        this._fireProgressEvent(\"load\");\n\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n\n}\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js"],"names":["whatwgEncoding","require","MIMEType","querystring","DOMException","EventTargetImpl","implementation","ProgressEvent","setupForSimpleEventAccessors","fireAnEvent","READY_STATES","Object","freeze","EMPTY","LOADING","DONE","events","FileReaderImpl","constructor","args","privateData","error","readyState","result","_ownerDocument","window","document","_terminated","readAsArrayBuffer","file","_readFile","readAsBinaryString","readAsDataURL","readAsText","encoding","labelToName","abort","_fireProgressEvent","name","props","format","setImmediate","data","_buffer","Buffer","alloc","lengthComputable","isNaN","size","total","loaded","length","Uint8Array","buffer","toString","dataUrl","contentType","parse","type","fallbackEncoding","getBOMEncoding","parameters","get","decoded","decode","set","escape","prototype","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst querystring = require(\"querystring\");\nconst DOMException = require(\"domexception\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\nconst { fireAnEvent } = require(\"../helpers/events\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\n\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super([], privateData);\n\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n\n    this._ownerDocument = privateData.window.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    fireAnEvent(name, this, ProgressEvent, props);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.readyState = READY_STATES.LOADING;\n\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\": {\n            this.result = (new Uint8Array(data)).buffer;\n            break;\n          }\n          case \"binaryString\": {\n            this.result = data.toString(\"binary\");\n            break;\n          }\n          case \"dataURL\": {\n            // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n            let dataUrl = \"data:\";\n            const contentType = MIMEType.parse(file.type);\n            if (contentType && contentType.type === \"text\") {\n              const fallbackEncoding = whatwgEncoding.getBOMEncoding(data) ||\n                whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n              const decoded = whatwgEncoding.decode(data, fallbackEncoding);\n\n              contentType.parameters.set(\"charset\", encoding);\n              dataUrl += contentType.toString();\n              dataUrl += \",\";\n              dataUrl += querystring.escape(decoded);\n            } else {\n              if (contentType) {\n                dataUrl += contentType.toString();\n              }\n              dataUrl += \";base64,\";\n              dataUrl += data.toString(\"base64\");\n            }\n            this.result = dataUrl;\n            break;\n          }\n          case \"text\": {\n            this.result = whatwgEncoding.decode(data, encoding);\n            break;\n          }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\n\nexports.implementation = FileReaderImpl;\n"]},"metadata":{},"sourceType":"script"}