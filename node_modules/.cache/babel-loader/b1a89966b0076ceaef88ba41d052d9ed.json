{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nconst {\n  parseFloatingPointNumber\n} = require(\"../helpers/strings\");\n\nclass HTMLProgressElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n  }\n\n  get value() {\n    const parsedValue = parseFloatingPointNumber(this.getAttributeNS(null, \"value\"));\n\n    if (!isNaN(parsedValue) && parsedValue > 0) {\n      return parsedValue > this.max ? this.max : parsedValue;\n    }\n\n    return 0;\n  }\n\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get max() {\n    const parsedMax = parseFloatingPointNumber(this.getAttributeNS(null, \"max\"));\n\n    if (!isNaN(parsedMax) && parsedMax > 0) {\n      return parsedMax;\n    }\n\n    return 1.0;\n  }\n\n  set max(value) {\n    this.setAttributeNS(null, \"max\", value);\n  }\n\n  get position() {\n    if (!this.hasAttributeNS(null, \"value\")) {\n      return -1;\n    }\n\n    return this.value / this.max;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLProgressElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLProgressElement-impl.js"],"names":["HTMLElementImpl","require","implementation","getLabelsForLabelable","parseFloatingPointNumber","HTMLProgressElementImpl","constructor","args","privateData","_labels","value","parsedValue","getAttributeNS","isNaN","max","setAttributeNS","parsedMax","position","hasAttributeNS","labels","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA4BF,OAAO,CAAC,0BAAD,CAAzC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAA+BH,OAAO,CAAC,oBAAD,CAA5C;;AAEA,MAAMI,uBAAN,SAAsCL,eAAtC,CAAsD;AACpDM,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;AAED,MAAIC,KAAJ,GAAY;AACV,UAAMC,WAAW,GAAGP,wBAAwB,CAAC,KAAKQ,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAD,CAA5C;;AAEA,QAAI,CAACC,KAAK,CAACF,WAAD,CAAN,IAAuBA,WAAW,GAAG,CAAzC,EAA4C;AAC1C,aAAOA,WAAW,GAAG,KAAKG,GAAnB,GAAyB,KAAKA,GAA9B,GAAoCH,WAA3C;AACD;;AAED,WAAO,CAAP;AACD;;AACD,MAAID,KAAJ,CAAUA,KAAV,EAAiB;AACf,SAAKK,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCL,KAAnC;AACD;;AAED,MAAII,GAAJ,GAAU;AACR,UAAME,SAAS,GAAGZ,wBAAwB,CAAC,KAAKQ,cAAL,CAAoB,IAApB,EAA0B,KAA1B,CAAD,CAA1C;;AAEA,QAAI,CAACC,KAAK,CAACG,SAAD,CAAN,IAAqBA,SAAS,GAAG,CAArC,EAAwC;AACtC,aAAOA,SAAP;AACD;;AAED,WAAO,GAAP;AACD;;AACD,MAAIF,GAAJ,CAAQJ,KAAR,EAAe;AACb,SAAKK,cAAL,CAAoB,IAApB,EAA0B,KAA1B,EAAiCL,KAAjC;AACD;;AAED,MAAIO,QAAJ,GAAe;AACb,QAAI,CAAC,KAAKC,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAL,EAAyC;AACvC,aAAO,CAAC,CAAR;AACD;;AAED,WAAO,KAAKR,KAAL,GAAa,KAAKI,GAAzB;AACD;;AAED,MAAIK,MAAJ,GAAa;AACX,WAAOhB,qBAAqB,CAAC,IAAD,CAA5B;AACD;;AA1CmD;;AA6CtDiB,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA,cAAc,EAAEG;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\nconst { parseFloatingPointNumber } = require(\"../helpers/strings\");\n\nclass HTMLProgressElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n  }\n\n  get value() {\n    const parsedValue = parseFloatingPointNumber(this.getAttributeNS(null, \"value\"));\n\n    if (!isNaN(parsedValue) && parsedValue > 0) {\n      return parsedValue > this.max ? this.max : parsedValue;\n    }\n\n    return 0;\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get max() {\n    const parsedMax = parseFloatingPointNumber(this.getAttributeNS(null, \"max\"));\n\n    if (!isNaN(parsedMax) && parsedMax > 0) {\n      return parsedMax;\n    }\n\n    return 1.0;\n  }\n  set max(value) {\n    this.setAttributeNS(null, \"max\", value);\n  }\n\n  get position() {\n    if (!this.hasAttributeNS(null, \"value\")) {\n      return -1;\n    }\n\n    return this.value / this.max;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLProgressElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}