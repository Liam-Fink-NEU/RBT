{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst fs = require(\"pn/fs\");\n\nconst vm = require(\"vm\");\n\nconst toughCookie = require(\"tough-cookie\");\n\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst {\n  URL\n} = require(\"whatwg-url\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nconst Window = require(\"./jsdom/browser/Window.js\");\n\nconst {\n  parseIntoDocument\n} = require(\"./jsdom/browser/parser\");\n\nconst {\n  fragmentSerialization\n} = require(\"./jsdom/living/domparsing/serialization.js\");\n\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\n\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\"); // This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\n\n\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({\n      looseMode: true\n    }, options));\n  }\n\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const {\n      html,\n      encoding\n    } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption], mimeType);\n    options = transformOptions(options, encoding, mimeType);\n    this[window] = new Window(options.windowOptions);\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    options.beforeParse(this[window]._globalProxy);\n    parseIntoDocument(html, documentImpl);\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), {\n      requireWellFormed: false\n    });\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n\n  runVMScript(script, options) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window], options);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n      const url = whatwgURL.parseURL(settings.url);\n\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string = \"\") {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = new JSDOM().window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ? new ResourceLoader() : resourceLoader;\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n      return req.then(body => {\n        const res = req.response;\n        let transportLayerEncodingLabel;\n\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: req.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n        return new JSDOM(body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  const normalized = Object.assign({}, options);\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    beforeParse() {}\n\n  }; // options.contentType was parsed into mimeType by the caller.\n\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      sourceCodeLocationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts !== \"dangerously\" && transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  } // concurrentNodeIterators??\n\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel, mimeType) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html,\n    encoding\n  };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined:\n      {\n        return new NoOpResourceLoader();\n      }\n\n    case \"usable\":\n      {\n        return new ResourceLoader();\n      }\n\n    default:\n      {\n        if (!(resources instanceof ResourceLoader)) {\n          throw new TypeError(\"resources must be an instance of ResourceLoader\");\n        }\n\n        return resources;\n      }\n  }\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\nexports.toughCookie = toughCookie;","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/api.js"],"names":["path","require","fs","vm","toughCookie","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","Window","parseIntoDocument","fragmentSerialization","ResourceLoader","NoOpResourceLoader","transportLayerEncodingLabelHiddenOption","Symbol","CookieJar","constructor","store","options","Object","assign","looseMode","window","sharedFragmentDocument","JSDOM","input","mimeType","contentType","undefined","html","encoding","normalizeHTML","transformOptions","windowOptions","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","close","virtualConsole","_virtualConsole","cookieJar","_cookieJar","serialize","requireWellFormed","nodeLocation","node","_parseOptions","sourceCodeLocationInfo","Error","sourceCodeLocation","runVMScript","script","isContext","TypeError","runInContext","reconfigure","settings","_top","windowTop","document","url","parseURL","_URL","origin","serializeURLOrigin","fragment","string","template","createElement","innerHTML","content","fromURL","Promise","resolve","then","parsedURL","href","normalizeFromURLOptions","resourceLoader","resourcesToResourceLoader","resources","resourceLoaderForInitialRequest","req","fetch","accept","referrer","body","res","response","transportLayerEncodingLabel","headers","parameters","get","hash","getHeader","fromFile","filename","normalizeFromFileOptions","readFile","buffer","normalized","extname","transformed","parsingMode","parseOptions","runScripts","pretendToBeVisual","storageQuota","isHTML","isXML","RangeError","essence","includeNodeLocations","sendTo","console","String","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","decode","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"pn/fs\");\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst Window = require(\"./jsdom/browser/Window.js\");\nconst { parseIntoDocument } = require(\"./jsdom/browser/parser\");\nconst { fragmentSerialization } = require(\"./jsdom/living/domparsing/serialization.js\");\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\n\n// This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({ looseMode: true }, options));\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const { html, encoding } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption], mimeType);\n\n    options = transformOptions(options, encoding, mimeType);\n\n    this[window] = new Window(options.windowOptions);\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    parseIntoDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), { requireWellFormed: false });\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n\n  runVMScript(script, options) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window], options);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string = \"\") {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ?\n        new ResourceLoader() :\n        resourceLoader;\n\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n\n      return req.then(body => {\n        const res = req.response;\n\n        let transportLayerEncodingLabel;\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: req.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n\n        return new JSDOM(body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = Object.assign({}, options);\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: { sourceCodeLocationInfo: false },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    beforeParse() { }\n  };\n\n  // options.contentType was parsed into mimeType by the caller.\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { sourceCodeLocationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts !== \"dangerously\" &&\n        transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  // concurrentNodeIterators??\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel, mimeType) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined: {\n      return new NoOpResourceLoader();\n    }\n    case \"usable\": {\n      return new ResourceLoader();\n    }\n    default: {\n      if (!(resources instanceof ResourceLoader)) {\n        throw new TypeError(\"resources must be an instance of ResourceLoader\");\n      }\n      return resources;\n    }\n  }\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\n\nexports.toughCookie = toughCookie;\n"]},"metadata":{},"sourceType":"script"}