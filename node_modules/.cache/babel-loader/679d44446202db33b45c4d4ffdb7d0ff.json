{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  isDisabled,\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nclass HTMLButtonElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n    this._hasActivationBehavior = true;\n  }\n\n  _activationBehavior() {\n    const {\n      form\n    } = this;\n\n    if (form && !isDisabled(this)) {\n      if (this.type === \"submit\") {\n        form._doSubmit();\n      }\n\n      if (this.type === \"reset\") {\n        form._doReset();\n      }\n    }\n  }\n\n  _getValue() {\n    const valueAttr = this.getAttributeNS(null, \"value\");\n    return valueAttr === null ? \"\" : valueAttr;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get type() {\n    const typeAttr = (this.getAttributeNS(null, \"type\") || \"\").toLowerCase();\n\n    switch (typeAttr) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        return typeAttr;\n\n      default:\n        return \"submit\";\n    }\n  }\n\n  set type(v) {\n    v = String(v).toLowerCase();\n\n    switch (v) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        this.setAttributeNS(null, \"type\", v);\n        break;\n\n      default:\n        this.setAttributeNS(null, \"type\", \"submit\");\n        break;\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.type === \"reset\" || this.type === \"button\";\n  }\n\n}\n\nmixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLButtonElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLButtonElement-impl.js"],"names":["HTMLElementImpl","require","implementation","isDisabled","formOwner","DefaultConstraintValidationImpl","mixin","getLabelsForLabelable","HTMLButtonElementImpl","constructor","args","privateData","_customValidityErrorMessage","_labels","_hasActivationBehavior","_activationBehavior","form","type","_doSubmit","_doReset","_getValue","valueAttr","getAttributeNS","labels","typeAttr","toLowerCase","v","String","setAttributeNS","_barredFromConstraintValidationSpecialization","prototype","module","exports"],"mappings":"AAAA;;AACA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AACA,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA4BH,OAAO,CAAC,0BAAD,CAAzC;;AACA,MAAMI,+BAA+B,GACnCJ,OAAO,CAAC,2DAAD,CAAP,CAAqEC,cADvE;;AAEA,MAAM;AAAEI,EAAAA;AAAF,IAAYL,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAA4BN,OAAO,CAAC,0BAAD,CAAzC;;AAEA,MAAMO,qBAAN,SAAoCR,eAApC,CAAoD;AAClDS,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;AAEA,SAAKC,2BAAL,GAAmC,EAAnC;AACA,SAAKC,OAAL,GAAe,IAAf;AAEA,SAAKC,sBAAL,GAA8B,IAA9B;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,UAAM;AAAEC,MAAAA;AAAF,QAAW,IAAjB;;AACA,QAAIA,IAAI,IAAI,CAACb,UAAU,CAAC,IAAD,CAAvB,EAA+B;AAC7B,UAAI,KAAKc,IAAL,KAAc,QAAlB,EAA4B;AAC1BD,QAAAA,IAAI,CAACE,SAAL;AACD;;AACD,UAAI,KAAKD,IAAL,KAAc,OAAlB,EAA2B;AACzBD,QAAAA,IAAI,CAACG,QAAL;AACD;AACF;AACF;;AAEDC,EAAAA,SAAS,GAAG;AACV,UAAMC,SAAS,GAAG,KAAKC,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAlB;AACA,WAAOD,SAAS,KAAK,IAAd,GAAqB,EAArB,GAA0BA,SAAjC;AACD;;AAED,MAAIE,MAAJ,GAAa;AACX,WAAOhB,qBAAqB,CAAC,IAAD,CAA5B;AACD;;AAED,MAAIS,IAAJ,GAAW;AACT,WAAOZ,SAAS,CAAC,IAAD,CAAhB;AACD;;AAED,MAAIa,IAAJ,GAAW;AACT,UAAMO,QAAQ,GAAG,CAAC,KAAKF,cAAL,CAAoB,IAApB,EAA0B,MAA1B,KAAqC,EAAtC,EAA0CG,WAA1C,EAAjB;;AACA,YAAQD,QAAR;AACE,WAAK,QAAL;AACA,WAAK,OAAL;AACA,WAAK,QAAL;AACE,eAAOA,QAAP;;AACF;AACE,eAAO,QAAP;AANJ;AAQD;;AAED,MAAIP,IAAJ,CAASS,CAAT,EAAY;AACVA,IAAAA,CAAC,GAAGC,MAAM,CAACD,CAAD,CAAN,CAAUD,WAAV,EAAJ;;AACA,YAAQC,CAAR;AACE,WAAK,QAAL;AACA,WAAK,OAAL;AACA,WAAK,QAAL;AACE,aAAKE,cAAL,CAAoB,IAApB,EAA0B,MAA1B,EAAkCF,CAAlC;AACA;;AACF;AACE,aAAKE,cAAL,CAAoB,IAApB,EAA0B,MAA1B,EAAkC,QAAlC;AACA;AARJ;AAUD;;AAEDC,EAAAA,6CAA6C,GAAG;AAC9C,WAAO,KAAKZ,IAAL,KAAc,OAAd,IAAyB,KAAKA,IAAL,KAAc,QAA9C;AACD;;AA/DiD;;AAkEpDX,KAAK,CAACE,qBAAqB,CAACsB,SAAvB,EAAkCzB,+BAA+B,CAACyB,SAAlE,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,cAAc,EAAEM;AADD,CAAjB","sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { isDisabled, formOwner } = require(\"../helpers/form-controls\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLButtonElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n\n    this._hasActivationBehavior = true;\n  }\n\n  _activationBehavior() {\n    const { form } = this;\n    if (form && !isDisabled(this)) {\n      if (this.type === \"submit\") {\n        form._doSubmit();\n      }\n      if (this.type === \"reset\") {\n        form._doReset();\n      }\n    }\n  }\n\n  _getValue() {\n    const valueAttr = this.getAttributeNS(null, \"value\");\n    return valueAttr === null ? \"\" : valueAttr;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get type() {\n    const typeAttr = (this.getAttributeNS(null, \"type\") || \"\").toLowerCase();\n    switch (typeAttr) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        return typeAttr;\n      default:\n        return \"submit\";\n    }\n  }\n\n  set type(v) {\n    v = String(v).toLowerCase();\n    switch (v) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        this.setAttributeNS(null, \"type\", v);\n        break;\n      default:\n        this.setAttributeNS(null, \"type\", \"submit\");\n        break;\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.type === \"reset\" || this.type === \"button\";\n  }\n}\n\nmixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLButtonElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}