{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nconst reportException = require(\"../helpers/runtime-script-errors\");\n\nconst {\n  domSymbolTree,\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\n\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach(); // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n\n\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _canRunScript() {\n    const document = this._ownerDocument; // Equivalent to the spec's \"scripting is disabled\" check.\n\n    if (!document._defaultView || document._defaultView._runScripts !== \"dangerously\" || document._scriptingDisabled) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _fetchExternalScript(src) {\n    const document = this._ownerDocument;\n    const resourceLoader = document._resourceLoader;\n\n    const defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, \"charset\")) || document._encoding;\n\n    let request;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    const onLoadExternalScript = data => {\n      const {\n        response\n      } = request;\n      let contentType;\n\n      if (response && response.statusCode !== undefined && response.statusCode >= 400) {\n        throw new Error(\"Status code: \" + response.statusCode);\n      }\n\n      if (response) {\n        contentType = MIMEType.parse(response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      }\n\n      const encoding = whatwgEncoding.getBOMEncoding(data) || contentType && whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || defaultEncoding;\n      const script = whatwgEncoding.decode(data, encoding);\n\n      this._innerEval(script, this.src);\n    };\n\n    request = resourceLoader.fetch(src, {\n      element: this,\n      onLoad: onLoadExternalScript\n    });\n  }\n\n  _fetchInternalScript() {\n    const document = this._ownerDocument;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    document._queue.push(null, () => {\n      this._innerEval(this.text, document.URL);\n\n      fireAnEvent(\"load\", this);\n    }, null, false, this);\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      this._fetchExternalScript(this.src);\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  } // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n\n\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    } // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n\n\n    if (!this.hasAttributeNS(null, \"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true; // TODO: implement nomodule here, **but only after we support modules**.\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttributeNS(null, \"src\")) {\n      this._fetchExternalScript(this.src);\n    } else {\n      this._fetchInternalScript();\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttributeNS(null, \"type\");\n    const langAttr = this.getAttributeNS(null, \"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(V) {\n    this.setAttributeNS(null, \"src\", V);\n  } // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\n\n\n  [cloningSteps](copy, node) {\n    copy._alreadyStarted = node._alreadyStarted;\n  }\n\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n    let lineOffset = 0;\n\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.sourceCodeLocation) {\n            lineOffset = child.sourceCodeLocation.startLine - 1;\n          }\n\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, {\n        filename,\n        lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString); // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js"],"names":["vm","require","whatwgEncoding","MIMEType","HTMLElementImpl","implementation","reflectURLAttribute","reportException","domSymbolTree","cloningSteps","asciiLowercase","childTextContent","fireAnEvent","nodeTypes","jsMIMETypes","Set","HTMLScriptElementImpl","constructor","args","privateData","_alreadyStarted","_parserInserted","_attach","_isMovingDueToDocumentWrite","_eval","_canRunScript","document","_ownerDocument","_defaultView","_runScripts","_scriptingDisabled","_fetchExternalScript","src","resourceLoader","_resourceLoader","defaultEncoding","labelToName","getAttributeNS","_encoding","request","onLoadExternalScript","data","response","contentType","statusCode","undefined","Error","parse","headers","encoding","getBOMEncoding","parameters","get","script","decode","_innerEval","fetch","element","onLoad","_fetchInternalScript","_queue","push","text","URL","_attrModified","name","value","oldValue","_attached","_startedEval","_poppedOffStackOfOpenElements","hasAttributeNS","length","scriptBlocksTypeString","_getTypeString","type","getType","filename","_writeAfterElement","processJavaScript","typeAttr","langAttr","trim","textContent","V","setAttributeNS","copy","node","code","ownerDocument","window","_global","_currentScript","lineOffset","child","childrenIterator","nodeType","TEXT_NODE","sourceCodeLocation","startLine","runInContext","displayErrors","e","typeString","lowercased","has","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst { domSymbolTree, cloningSteps } = require(\"../helpers/internal-constants\");\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\n  \"application/ecmascript\",\n  \"application/javascript\",\n  \"application/x-ecmascript\",\n  \"application/x-javascript\",\n  \"text/ecmascript\",\n  \"text/javascript\",\n  \"text/javascript1.0\",\n  \"text/javascript1.1\",\n  \"text/javascript1.2\",\n  \"text/javascript1.3\",\n  \"text/javascript1.4\",\n  \"text/javascript1.5\",\n  \"text/jscript\",\n  \"text/livescript\",\n  \"text/x-ecmascript\",\n  \"text/x-javascript\"\n]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _canRunScript() {\n    const document = this._ownerDocument;\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!document._defaultView || document._defaultView._runScripts !== \"dangerously\" || document._scriptingDisabled) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _fetchExternalScript(src) {\n    const document = this._ownerDocument;\n    const resourceLoader = document._resourceLoader;\n    const defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, \"charset\")) || document._encoding;\n    let request;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    const onLoadExternalScript = data => {\n      const { response } = request;\n      let contentType;\n\n      if (response && response.statusCode !== undefined && response.statusCode >= 400) {\n        throw new Error(\"Status code: \" + response.statusCode);\n      }\n\n      if (response) {\n        contentType = MIMEType.parse(response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      }\n\n      const encoding = whatwgEncoding.getBOMEncoding(data) ||\n        (contentType && whatwgEncoding.labelToName(contentType.parameters.get(\"charset\"))) ||\n        defaultEncoding;\n      const script = whatwgEncoding.decode(data, encoding);\n\n      this._innerEval(script, this.src);\n    };\n\n    request = resourceLoader.fetch(src, {\n      element: this,\n      onLoad: onLoadExternalScript\n    });\n  }\n\n  _fetchInternalScript() {\n    const document = this._ownerDocument;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    document._queue.push(null, () => {\n      this._innerEval(this.text, document.URL);\n\n      fireAnEvent(\"load\", this);\n    }, null, false, this);\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      this._fetchExternalScript(this.src);\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttributeNS(null, \"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true;\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttributeNS(null, \"src\")) {\n      this._fetchExternalScript(this.src);\n    } else {\n      this._fetchInternalScript();\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttributeNS(null, \"type\");\n    const langAttr = this.getAttributeNS(null, \"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(V) {\n    this.setAttributeNS(null, \"src\", V);\n  }\n\n  // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\n  [cloningSteps](copy, node) {\n    copy._alreadyStarted = node._alreadyStarted;\n  }\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n\n    let lineOffset = 0;\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.sourceCodeLocation) {\n            lineOffset = child.sourceCodeLocation.startLine - 1;\n          }\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, { filename, lineOffset, displayErrors: false });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}