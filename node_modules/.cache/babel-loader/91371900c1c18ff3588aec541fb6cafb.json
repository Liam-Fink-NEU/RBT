{"ast":null,"code":"\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\n\nconst DocumentType = require(\"../generated/DocumentType\");\n\nconst Document = require(\"../generated/Document\");\n\nconst {\n  HTML_NS,\n  SVG_NS\n} = require(\"../helpers/namespaces\");\n\nclass DOMImplementationImpl {\n  constructor(args, privateData) {\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  hasFeature() {\n    return true;\n  }\n\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(qualifiedName);\n    return DocumentType.createImpl([], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  }\n\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n\n    const document = Document.createImpl([], {\n      options: {\n        contentType,\n        parsingMode: \"xml\",\n        encoding: \"UTF-8\"\n      }\n    });\n    let element = null;\n\n    if (qualifiedName !== \"\") {\n      element = document.createElementNS(namespace, qualifiedName);\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    document.origin = this._ownerDocument.origin;\n    return document;\n  }\n\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = Document.createImpl([], {\n      options: {\n        parsingMode: \"html\",\n        encoding: \"UTF-8\"\n      }\n    }); // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n\n    const doctype = DocumentType.createImpl([], {\n      ownerDocument: this,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n    document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.\n\n    const htmlElement = document.createElementNS(HTML_NS, \"html\");\n    document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n\n    const headElement = document.createElement(\"head\");\n    htmlElement.appendChild(headElement); // If the title argument is not omitted:\n\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = document.createElement(\"title\");\n      headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n\n      titleElement.appendChild(document.createTextNode(title));\n    } // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n\n\n    htmlElement.appendChild(document.createElement(\"body\")); // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n\n}\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/DOMImplementation-impl.js"],"names":["validateNames","require","DocumentType","Document","HTML_NS","SVG_NS","DOMImplementationImpl","constructor","args","privateData","_ownerDocument","ownerDocument","hasFeature","createDocumentType","qualifiedName","publicId","systemId","qname","createImpl","name","createDocument","namespace","doctype","contentType","document","options","parsingMode","encoding","element","createElementNS","appendChild","origin","createHTMLDocument","title","htmlElement","headElement","createElement","undefined","titleElement","createTextNode","module","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\nconst DocumentType = require(\"../generated/DocumentType\");\nconst Document = require(\"../generated/Document\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\n\nclass DOMImplementationImpl {\n  constructor(args, privateData) {\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  hasFeature() {\n    return true;\n  }\n\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(qualifiedName);\n\n    return DocumentType.createImpl([], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  }\n\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n\n    const document = Document.createImpl([], {\n      options: { contentType, parsingMode: \"xml\", encoding: \"UTF-8\" }\n    });\n\n    let element = null;\n    if (qualifiedName !== \"\") {\n      element = document.createElementNS(namespace, qualifiedName);\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    document.origin = this._ownerDocument.origin;\n\n    return document;\n  }\n\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = Document.createImpl([], {\n      options: { parsingMode: \"html\", encoding: \"UTF-8\" }\n    });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    const doctype = DocumentType.createImpl([], {\n      ownerDocument: this,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    const htmlElement = document.createElementNS(HTML_NS, \"html\");\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    const headElement = document.createElement(\"head\");\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = document.createElement(\"title\");\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    htmlElement.appendChild(document.createElement(\"body\"));\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n}\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};\n"]},"metadata":{},"sourceType":"script"}