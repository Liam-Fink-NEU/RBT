{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertBlobPropertyBag = require(\"./BlobPropertyBag.js\").convert;\n\nconst impl = utils.implSymbol;\n\nclass Blob {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        if (!utils.isObject(curArg)) {\n          throw new TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n        } else {\n          const V = [];\n          const tmp = curArg;\n\n          for (let nextItem of tmp) {\n            if (module.exports.is(nextItem)) {\n              nextItem = utils.implForWrapper(nextItem);\n            } else if (nextItem instanceof ArrayBuffer) {} else if (ArrayBuffer.isView(nextItem)) {} else {\n              nextItem = conversions[\"USVString\"](nextItem, {\n                context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\"\n              });\n            }\n\n            V.push(nextItem);\n          }\n\n          curArg = V;\n        }\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = convertBlobPropertyBag(curArg, {\n        context: \"Failed to construct 'Blob': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  slice() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        curArg = conversions[\"long long\"](curArg, {\n          context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n          clamp: true\n        });\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n\n      if (curArg !== undefined) {\n        curArg = conversions[\"long long\"](curArg, {\n          context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n          clamp: true\n        });\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[2];\n\n      if (curArg !== undefined) {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'slice' on 'Blob': parameter 3\"\n        });\n      }\n\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].slice(...args));\n  }\n\n  get size() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"size\"];\n  }\n\n  get type() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"type\"];\n  }\n\n}\n\nObject.defineProperties(Blob.prototype, {\n  slice: {\n    enumerable: true\n  },\n  size: {\n    enumerable: true\n  },\n  type: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"Blob\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'Blob'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Blob.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Blob.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Blob,\n  expose: {\n    Window: {\n      Blob\n    },\n    Worker: {\n      Blob\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../file-api/Blob-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/Blob.js"],"names":["conversions","require","utils","convertBlobPropertyBag","convert","impl","implSymbol","Blob","constructor","args","curArg","arguments","undefined","isObject","TypeError","V","tmp","nextItem","module","exports","is","implForWrapper","ArrayBuffer","isView","context","push","iface","setup","Object","create","new","target","prototype","slice","clamp","tryWrapperForImpl","size","type","defineProperties","enumerable","Symbol","toStringTag","value","configurable","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","constructorArgs","privateData","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","interface","expose","Window","Worker"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertBlobPropertyBag = require(\"./BlobPropertyBag.js\").convert;\nconst impl = utils.implSymbol;\n\nclass Blob {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg !== undefined) {\n        if (!utils.isObject(curArg)) {\n          throw new TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n        } else {\n          const V = [];\n          const tmp = curArg;\n          for (let nextItem of tmp) {\n            if (module.exports.is(nextItem)) {\n              nextItem = utils.implForWrapper(nextItem);\n            } else if (nextItem instanceof ArrayBuffer) {\n            } else if (ArrayBuffer.isView(nextItem)) {\n            } else {\n              nextItem = conversions[\"USVString\"](nextItem, {\n                context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\"\n              });\n            }\n            V.push(nextItem);\n          }\n          curArg = V;\n        }\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = convertBlobPropertyBag(curArg, { context: \"Failed to construct 'Blob': parameter 2\" });\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  slice() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg !== undefined) {\n        curArg = conversions[\"long long\"](curArg, {\n          context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n          clamp: true\n        });\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      if (curArg !== undefined) {\n        curArg = conversions[\"long long\"](curArg, {\n          context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n          clamp: true\n        });\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[2];\n      if (curArg !== undefined) {\n        curArg = conversions[\"DOMString\"](curArg, { context: \"Failed to execute 'slice' on 'Blob': parameter 3\" });\n      }\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].slice(...args));\n  }\n\n  get size() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"size\"];\n  }\n\n  get type() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"type\"];\n  }\n}\nObject.defineProperties(Blob.prototype, {\n  slice: { enumerable: true },\n  size: { enumerable: true },\n  type: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"Blob\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'Blob'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Blob.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Blob.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: Blob,\n  expose: {\n    Window: { Blob },\n    Worker: { Blob }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../file-api/Blob-impl.js\");\n"]},"metadata":{},"sourceType":"script"}