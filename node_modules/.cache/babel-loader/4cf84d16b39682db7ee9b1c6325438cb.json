{"ast":null,"code":"\"use strict\";\n\nconst DOMTokenList = require(\"../generated/DOMTokenList\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst {\n  getLabelsForLabelable,\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nclass HTMLOutputElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n    this._defaultValue = \"\";\n    this._valueMode = \"default\";\n    this._customValidityErrorMessage = \"\";\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"for\" && this._htmlFor !== undefined) {\n      this._htmlFor.attrModified();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return true;\n  }\n\n  _formReset() {\n    if (this._valueMode === \"value\") {\n      this.textContent = this._defaultValue;\n    }\n\n    this._defaultValue = \"\";\n    this._valueMode = \"default\";\n  }\n\n  get htmlFor() {\n    if (this._htmlFor === undefined) {\n      this._htmlFor = DOMTokenList.createImpl([], {\n        element: this,\n        attributeLocalName: \"for\"\n      });\n    }\n\n    return this._htmlFor;\n  }\n\n  get type() {\n    return \"output\";\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get value() {\n    return this.textContent;\n  }\n\n  set value(val) {\n    this._valueMode = \"value\";\n    this._defaultValue = this.textContent;\n    this.textContent = val;\n  }\n\n  get defaultValue() {\n    return this._valueMode === \"default\" ? this.textContent : this._defaultValue;\n  }\n\n  set defaultValue(val) {\n    this._defaultValue = val;\n\n    if (this._valueMode === \"default\") {\n      this.textContent = val;\n    }\n  }\n\n}\n\nmixin(HTMLOutputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLOutputElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOutputElement-impl.js"],"names":["DOMTokenList","require","HTMLElementImpl","implementation","DefaultConstraintValidationImpl","mixin","getLabelsForLabelable","formOwner","HTMLOutputElementImpl","constructor","args","privateData","_labels","_defaultValue","_valueMode","_customValidityErrorMessage","_attrModified","name","value","oldValue","_htmlFor","undefined","attrModified","_barredFromConstraintValidationSpecialization","_formReset","textContent","htmlFor","createImpl","element","attributeLocalName","type","labels","form","val","defaultValue","prototype","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BE,cAAtD;;AACA,MAAMC,+BAA+B,GACnCH,OAAO,CAAC,2DAAD,CAAP,CAAqEE,cADvE;;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAYJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAM;AAAEK,EAAAA,qBAAF;AAAyBC,EAAAA;AAAzB,IAAuCN,OAAO,CAAC,0BAAD,CAApD;;AAEA,MAAMO,qBAAN,SAAoCN,eAApC,CAAoD;AAClDO,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,GAAkB,SAAlB;AAEA,SAAKC,2BAAL,GAAmC,EAAnC;AACD;;AAEDC,EAAAA,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AACnC,UAAMH,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,QAAjC;;AAEA,QAAIF,IAAI,KAAK,KAAT,IAAkB,KAAKG,QAAL,KAAkBC,SAAxC,EAAmD;AACjD,WAAKD,QAAL,CAAcE,YAAd;AACD;AACF;;AAEDC,EAAAA,6CAA6C,GAAG;AAC9C,WAAO,IAAP;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKV,UAAL,KAAoB,OAAxB,EAAiC;AAC/B,WAAKW,WAAL,GAAmB,KAAKZ,aAAxB;AACD;;AAED,SAAKA,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,GAAkB,SAAlB;AACD;;AAED,MAAIY,OAAJ,GAAc;AACZ,QAAI,KAAKN,QAAL,KAAkBC,SAAtB,EAAiC;AAC/B,WAAKD,QAAL,GAAgBpB,YAAY,CAAC2B,UAAb,CAAwB,EAAxB,EAA4B;AAC1CC,QAAAA,OAAO,EAAE,IADiC;AAE1CC,QAAAA,kBAAkB,EAAE;AAFsB,OAA5B,CAAhB;AAID;;AACD,WAAO,KAAKT,QAAZ;AACD;;AAED,MAAIU,IAAJ,GAAW;AACT,WAAO,QAAP;AACD;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAOzB,qBAAqB,CAAC,IAAD,CAA5B;AACD;;AAED,MAAI0B,IAAJ,GAAW;AACT,WAAOzB,SAAS,CAAC,IAAD,CAAhB;AACD;;AAED,MAAIW,KAAJ,GAAY;AACV,WAAO,KAAKO,WAAZ;AACD;;AAED,MAAIP,KAAJ,CAAUe,GAAV,EAAe;AACb,SAAKnB,UAAL,GAAkB,OAAlB;AACA,SAAKD,aAAL,GAAqB,KAAKY,WAA1B;AACA,SAAKA,WAAL,GAAmBQ,GAAnB;AACD;;AAED,MAAIC,YAAJ,GAAmB;AACjB,WAAO,KAAKpB,UAAL,KAAoB,SAApB,GAAgC,KAAKW,WAArC,GAAmD,KAAKZ,aAA/D;AACD;;AAED,MAAIqB,YAAJ,CAAiBD,GAAjB,EAAsB;AACpB,SAAKpB,aAAL,GAAqBoB,GAArB;;AAEA,QAAI,KAAKnB,UAAL,KAAoB,SAAxB,EAAmC;AACjC,WAAKW,WAAL,GAAmBQ,GAAnB;AACD;AACF;;AAzEiD;;AA4EpD5B,KAAK,CAACG,qBAAqB,CAAC2B,SAAvB,EAAkC/B,+BAA+B,CAAC+B,SAAlE,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACflC,EAAAA,cAAc,EAAEK;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst DOMTokenList = require(\"../generated/DOMTokenList\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst { getLabelsForLabelable, formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOutputElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n    this._defaultValue = \"\";\n    this._valueMode = \"default\";\n\n    this._customValidityErrorMessage = \"\";\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"for\" && this._htmlFor !== undefined) {\n      this._htmlFor.attrModified();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return true;\n  }\n\n  _formReset() {\n    if (this._valueMode === \"value\") {\n      this.textContent = this._defaultValue;\n    }\n\n    this._defaultValue = \"\";\n    this._valueMode = \"default\";\n  }\n\n  get htmlFor() {\n    if (this._htmlFor === undefined) {\n      this._htmlFor = DOMTokenList.createImpl([], {\n        element: this,\n        attributeLocalName: \"for\"\n      });\n    }\n    return this._htmlFor;\n  }\n\n  get type() {\n    return \"output\";\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get value() {\n    return this.textContent;\n  }\n\n  set value(val) {\n    this._valueMode = \"value\";\n    this._defaultValue = this.textContent;\n    this.textContent = val;\n  }\n\n  get defaultValue() {\n    return this._valueMode === \"default\" ? this.textContent : this._defaultValue;\n  }\n\n  set defaultValue(val) {\n    this._defaultValue = val;\n\n    if (this._valueMode === \"default\") {\n      this.textContent = val;\n    }\n  }\n}\n\nmixin(HTMLOutputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLOutputElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}