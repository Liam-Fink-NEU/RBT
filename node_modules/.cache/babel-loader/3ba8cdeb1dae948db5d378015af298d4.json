{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertHTMLFormElement = require(\"./HTMLFormElement.js\").convert;\n\nconst isBlob = require(\"./Blob.js\").is;\n\nconst convertBlob = require(\"./Blob.js\").convert;\n\nconst impl = utils.implSymbol;\nconst IteratorPrototype = Object.create(utils.IteratorPrototype, {\n  next: {\n    value: function next() {\n      const internal = this[utils.iterInternalSymbol];\n      const {\n        target,\n        kind,\n        index\n      } = internal;\n      const values = Array.from(target[impl]);\n      const len = values.length;\n\n      if (index >= len) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      const [key, value] = pair.map(utils.tryWrapperForImpl);\n      let result;\n\n      switch (kind) {\n        case \"key\":\n          result = key;\n          break;\n\n        case \"value\":\n          result = value;\n          break;\n\n        case \"key+value\":\n          result = [key, value];\n          break;\n      }\n\n      return {\n        value: result,\n        done: false\n      };\n    },\n    writable: true,\n    enumerable: true,\n    configurable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"FormData Iterator\",\n    configurable: true\n  }\n});\n\nclass FormData {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        curArg = convertHTMLFormElement(curArg, {\n          context: \"Failed to construct 'FormData': parameter 1\"\n        });\n      }\n\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  append(name, value) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'append' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n\n    switch (arguments.length) {\n      case 2:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n\n          if (isBlob(curArg)) {\n            {\n              let curArg = arguments[1];\n              curArg = convertBlob(curArg, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n              });\n              args.push(curArg);\n            }\n          } else {\n            {\n              let curArg = arguments[1];\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n              });\n              args.push(curArg);\n            }\n          }\n        }\n        break;\n\n      default:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n          curArg = convertBlob(curArg, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[2];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 3\"\n            });\n          }\n\n          args.push(curArg);\n        }\n    }\n\n    return this[impl].append(...args);\n  }\n\n  delete(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'delete' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'delete' on 'FormData': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].delete(...args);\n  }\n\n  get(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'get' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'get' on 'FormData': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].get(...args));\n  }\n\n  getAll(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'getAll' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'getAll' on 'FormData': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getAll(...args));\n  }\n\n  has(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'has' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'has' on 'FormData': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].has(...args);\n  }\n\n  set(name, value) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'set' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n\n    switch (arguments.length) {\n      case 2:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'set' on 'FormData': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n\n          if (isBlob(curArg)) {\n            {\n              let curArg = arguments[1];\n              curArg = convertBlob(curArg, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n              });\n              args.push(curArg);\n            }\n          } else {\n            {\n              let curArg = arguments[1];\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n              });\n              args.push(curArg);\n            }\n          }\n        }\n        break;\n\n      default:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'set' on 'FormData': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n          curArg = convertBlob(curArg, {\n            context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[2];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 3\"\n            });\n          }\n\n          args.push(curArg);\n        }\n    }\n\n    return this[impl].set(...args);\n  }\n\n  keys() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"key\");\n  }\n\n  values() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"value\");\n  }\n\n  entries() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"key+value\");\n  }\n\n  forEach(callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, \" + \"but only 0 present.\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\"Failed to execute 'forEach' on 'iterable': The callback provided \" + \"as parameter 1 is not a function.\");\n    }\n\n    const thisArg = arguments[1];\n    let pairs = Array.from(this[impl]);\n    let i = 0;\n\n    while (i < pairs.length) {\n      const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n      callback.call(thisArg, value, key, this);\n      pairs = Array.from(this[impl]);\n      i++;\n    }\n  }\n\n}\n\nObject.defineProperties(FormData.prototype, {\n  append: {\n    enumerable: true\n  },\n  delete: {\n    enumerable: true\n  },\n  get: {\n    enumerable: true\n  },\n  getAll: {\n    enumerable: true\n  },\n  has: {\n    enumerable: true\n  },\n  set: {\n    enumerable: true\n  },\n  keys: {\n    enumerable: true\n  },\n  values: {\n    enumerable: true\n  },\n  entries: {\n    enumerable: true\n  },\n  forEach: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"FormData\",\n    configurable: true\n  },\n  [Symbol.iterator]: {\n    value: FormData.prototype.entries,\n    configurable: true,\n    writable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'FormData'.`);\n  },\n\n  createDefaultIterator(target, kind) {\n    const iterator = Object.create(IteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n      value: {\n        target,\n        kind,\n        index: 0\n      },\n      configurable: true\n    });\n    return iterator;\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: FormData,\n  expose: {\n    Window: {\n      FormData\n    },\n    Worker: {\n      FormData\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../xhr/FormData-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/FormData.js"],"names":["conversions","require","utils","convertHTMLFormElement","convert","isBlob","is","convertBlob","impl","implSymbol","IteratorPrototype","Object","create","next","value","internal","iterInternalSymbol","target","kind","index","values","Array","from","len","length","undefined","done","pair","key","map","tryWrapperForImpl","result","writable","enumerable","configurable","Symbol","toStringTag","FormData","constructor","args","curArg","arguments","context","push","iface","setup","new","prototype","append","name","module","exports","TypeError","delete","get","getAll","has","set","keys","createDefaultIterator","entries","forEach","callback","thisArg","pairs","i","call","defineProperties","iterator","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","defineProperty","constructorArgs","privateData","createImpl","_internalSetup","wrapperSymbol","init","interface","expose","Window","Worker"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertHTMLFormElement = require(\"./HTMLFormElement.js\").convert;\nconst isBlob = require(\"./Blob.js\").is;\nconst convertBlob = require(\"./Blob.js\").convert;\nconst impl = utils.implSymbol;\n\nconst IteratorPrototype = Object.create(utils.IteratorPrototype, {\n  next: {\n    value: function next() {\n      const internal = this[utils.iterInternalSymbol];\n      const { target, kind, index } = internal;\n      const values = Array.from(target[impl]);\n      const len = values.length;\n      if (index >= len) {\n        return { value: undefined, done: true };\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      const [key, value] = pair.map(utils.tryWrapperForImpl);\n\n      let result;\n      switch (kind) {\n        case \"key\":\n          result = key;\n          break;\n        case \"value\":\n          result = value;\n          break;\n        case \"key+value\":\n          result = [key, value];\n          break;\n      }\n      return { value: result, done: false };\n    },\n    writable: true,\n    enumerable: true,\n    configurable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"FormData Iterator\",\n    configurable: true\n  }\n});\nclass FormData {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg !== undefined) {\n        curArg = convertHTMLFormElement(curArg, { context: \"Failed to construct 'FormData': parameter 1\" });\n      }\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  append(name, value) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    switch (arguments.length) {\n      case 2:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n          if (isBlob(curArg)) {\n            {\n              let curArg = arguments[1];\n              curArg = convertBlob(curArg, { context: \"Failed to execute 'append' on 'FormData': parameter 2\" });\n              args.push(curArg);\n            }\n          } else {\n            {\n              let curArg = arguments[1];\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n              });\n              args.push(curArg);\n            }\n          }\n        }\n        break;\n      default:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n          curArg = convertBlob(curArg, { context: \"Failed to execute 'append' on 'FormData': parameter 2\" });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[2];\n          if (curArg !== undefined) {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 3\"\n            });\n          }\n          args.push(curArg);\n        }\n    }\n    return this[impl].append(...args);\n  }\n\n  delete(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'delete' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, { context: \"Failed to execute 'delete' on 'FormData': parameter 1\" });\n      args.push(curArg);\n    }\n    return this[impl].delete(...args);\n  }\n\n  get(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'get' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, { context: \"Failed to execute 'get' on 'FormData': parameter 1\" });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].get(...args));\n  }\n\n  getAll(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'getAll' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, { context: \"Failed to execute 'getAll' on 'FormData': parameter 1\" });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getAll(...args));\n  }\n\n  has(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'has' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, { context: \"Failed to execute 'has' on 'FormData': parameter 1\" });\n      args.push(curArg);\n    }\n    return this[impl].has(...args);\n  }\n\n  set(name, value) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    switch (arguments.length) {\n      case 2:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, { context: \"Failed to execute 'set' on 'FormData': parameter 1\" });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n          if (isBlob(curArg)) {\n            {\n              let curArg = arguments[1];\n              curArg = convertBlob(curArg, { context: \"Failed to execute 'set' on 'FormData': parameter 2\" });\n              args.push(curArg);\n            }\n          } else {\n            {\n              let curArg = arguments[1];\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n              });\n              args.push(curArg);\n            }\n          }\n        }\n        break;\n      default:\n        {\n          let curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, { context: \"Failed to execute 'set' on 'FormData': parameter 1\" });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[1];\n          curArg = convertBlob(curArg, { context: \"Failed to execute 'set' on 'FormData': parameter 2\" });\n          args.push(curArg);\n        }\n        {\n          let curArg = arguments[2];\n          if (curArg !== undefined) {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 3\"\n            });\n          }\n          args.push(curArg);\n        }\n    }\n    return this[impl].set(...args);\n  }\n\n  keys() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    return module.exports.createDefaultIterator(this, \"key\");\n  }\n\n  values() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    return module.exports.createDefaultIterator(this, \"value\");\n  }\n\n  entries() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    return module.exports.createDefaultIterator(this, \"key+value\");\n  }\n\n  forEach(callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, \" + \"but only 0 present.\");\n    }\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'iterable': The callback provided \" + \"as parameter 1 is not a function.\"\n      );\n    }\n    const thisArg = arguments[1];\n    let pairs = Array.from(this[impl]);\n    let i = 0;\n    while (i < pairs.length) {\n      const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n      callback.call(thisArg, value, key, this);\n      pairs = Array.from(this[impl]);\n      i++;\n    }\n  }\n}\nObject.defineProperties(FormData.prototype, {\n  append: { enumerable: true },\n  delete: { enumerable: true },\n  get: { enumerable: true },\n  getAll: { enumerable: true },\n  has: { enumerable: true },\n  set: { enumerable: true },\n  keys: { enumerable: true },\n  values: { enumerable: true },\n  entries: { enumerable: true },\n  forEach: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"FormData\", configurable: true },\n  [Symbol.iterator]: { value: FormData.prototype.entries, configurable: true, writable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'FormData'.`);\n  },\n\n  createDefaultIterator(target, kind) {\n    const iterator = Object.create(IteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n      value: { target, kind, index: 0 },\n      configurable: true\n    });\n    return iterator;\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: FormData,\n  expose: {\n    Window: { FormData },\n    Worker: { FormData }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../xhr/FormData-impl.js\");\n"]},"metadata":{},"sourceType":"script"}