{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\n\nconst impl = utils.implSymbol;\n\nclass DOMParser {\n  constructor() {\n    return iface.setup(Object.create(new.target.prototype));\n  }\n\n  parseFromString(str, type) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = convertSupportedType(curArg, {\n        context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n  }\n\n}\n\nObject.defineProperties(DOMParser.prototype, {\n  parseFromString: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"DOMParser\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: DOMParser,\n  expose: {\n    Window: {\n      DOMParser\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/DOMParser.js"],"names":["conversions","require","utils","convertSupportedType","convert","impl","implSymbol","DOMParser","constructor","iface","setup","Object","create","new","target","prototype","parseFromString","str","type","module","exports","is","TypeError","arguments","length","args","curArg","context","push","tryWrapperForImpl","defineProperties","enumerable","Symbol","toStringTag","value","configurable","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","constructorArgs","privateData","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","interface","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\nconst impl = utils.implSymbol;\n\nclass DOMParser {\n  constructor() {\n    return iface.setup(Object.create(new.target.prototype));\n  }\n\n  parseFromString(str, type) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = convertSupportedType(curArg, {\n        context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n  }\n}\nObject.defineProperties(DOMParser.prototype, {\n  parseFromString: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"DOMParser\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: DOMParser,\n  expose: {\n    Window: { DOMParser }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");\n"]},"metadata":{},"sourceType":"script"}