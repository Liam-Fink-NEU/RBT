{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nconst CharacterData = require(\"./CharacterData.js\");\n\nconst Slotable = require(\"./Slotable.js\");\n\nclass Text extends CharacterData.interface {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to construct 'Text': parameter 1\"\n        });\n      } else {\n        curArg = \"\";\n      }\n\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  splitText(offset) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'splitText' on 'Text': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"unsigned long\"](curArg, {\n        context: \"Failed to execute 'splitText' on 'Text': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].splitText(...args));\n  }\n\n  get wholeText() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"wholeText\"];\n  }\n\n  get assignedSlot() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"assignedSlot\"]);\n  }\n\n}\n\nObject.defineProperties(Text.prototype, {\n  splitText: {\n    enumerable: true\n  },\n  wholeText: {\n    enumerable: true\n  },\n  assignedSlot: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"Text\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'Text'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Text.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Text.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    CharacterData._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Text,\n  expose: {\n    Window: {\n      Text\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nSlotable._mixedIntoPredicates.push(module.exports.is);\n\nconst Impl = require(\"../nodes/Text-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/Text.js"],"names":["conversions","require","utils","impl","implSymbol","CharacterData","Slotable","Text","interface","constructor","args","curArg","arguments","undefined","context","push","iface","setup","Object","create","new","target","prototype","splitText","offset","module","exports","is","TypeError","length","tryWrapperForImpl","wholeText","assignedSlot","defineProperties","enumerable","Symbol","toStringTag","value","configurable","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","convert","implForWrapper","constructorArgs","privateData","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\nconst CharacterData = require(\"./CharacterData.js\");\nconst Slotable = require(\"./Slotable.js\");\n\nclass Text extends CharacterData.interface {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg !== undefined) {\n        curArg = conversions[\"DOMString\"](curArg, { context: \"Failed to construct 'Text': parameter 1\" });\n      } else {\n        curArg = \"\";\n      }\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  splitText(offset) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'splitText' on 'Text': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"unsigned long\"](curArg, {\n        context: \"Failed to execute 'splitText' on 'Text': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].splitText(...args));\n  }\n\n  get wholeText() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"wholeText\"];\n  }\n\n  get assignedSlot() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"assignedSlot\"]);\n  }\n}\nObject.defineProperties(Text.prototype, {\n  splitText: { enumerable: true },\n  wholeText: { enumerable: true },\n  assignedSlot: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"Text\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'Text'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Text.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Text.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {\n    CharacterData._internalSetup(obj);\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: Text,\n  expose: {\n    Window: { Text }\n  }\n}; // iface\nmodule.exports = iface;\n\nSlotable._mixedIntoPredicates.push(module.exports.is);\n\nconst Impl = require(\"../nodes/Text-impl.js\");\n"]},"metadata":{},"sourceType":"script"}