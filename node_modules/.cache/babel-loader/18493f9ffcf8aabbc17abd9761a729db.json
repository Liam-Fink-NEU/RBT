{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  descendantsByLocalNames\n} = require(\"../helpers/traversal\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\"); // http://www.whatwg.org/specs/web-apps/current-work/#category-listed\n\n\nconst listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\"]); // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n\nconst submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\nconst encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nconst methods = new Set([\"get\", \"post\", \"dialog\"]);\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  get elements() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => descendantsByLocalNames(this, listedElements)\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.submit();\n  }\n\n  submit() {\n    if (!fireAnEvent(\"submit\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  _doReset() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    if (!fireAnEvent(\"reset\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttributeNS(null, \"method\");\n\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttributeNS(null, \"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttributeNS(null, \"enctype\");\n\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttributeNS(null, \"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttributeNS(null, \"action\");\n\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    return reflectURLAttribute(this, \"action\");\n  }\n\n  set action(V) {\n    this.setAttributeNS(null, \"action\", V);\n  } // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n\n\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n\n  reportValidity() {\n    return this.checkValidity();\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n\n  _staticallyValidateConstraints() {\n    const controls = [];\n\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return {\n        result: constraintValidationPositiveResult\n      };\n    }\n\n    const unhandledInvalidControls = [];\n\n    for (const invalidControl of invalidControls) {\n      const notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, {\n        cancelable: true\n      });\n\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return {\n      result: constraintValidationNegativeResult,\n      unhandledInvalidControls\n    };\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement-impl.js"],"names":["HTMLElementImpl","require","implementation","descendantsByLocalNames","domSymbolTree","fireAnEvent","HTMLCollection","notImplemented","reflectURLAttribute","listedElements","Set","submittableElements","encTypes","methods","constraintValidationPositiveResult","Symbol","constraintValidationNegativeResult","HTMLFormElementImpl","_descendantAdded","parent","child","form","el","treeIterator","_changedFormOwner","apply","arguments","_descendantRemoved","elements","createImpl","element","query","length","_doSubmit","isConnected","submit","undefined","bubbles","cancelable","_ownerDocument","_defaultView","_doReset","reset","_formReset","method","getAttributeNS","toLowerCase","has","V","setAttributeNS","enctype","type","action","attributeValue","URL","checkValidity","_staticallyValidateConstraints","result","reportValidity","controls","nodeName","push","invalidControls","control","_isCandidateForConstraintValidation","_satisfiesConstraints","unhandledInvalidControls","invalidControl","notCancelled","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { descendantsByLocalNames } = require(\"../helpers/traversal\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst { reflectURLAttribute } = require(\"../../utils\");\n\n// http://www.whatwg.org/specs/web-apps/current-work/#category-listed\nconst listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\"]);\n\n// https://html.spec.whatwg.org/multipage/forms.html#category-submit\nconst submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\n\nconst encTypes = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\"\n]);\n\nconst methods = new Set([\n  \"get\",\n  \"post\",\n  \"dialog\"\n]);\n\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  get elements() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => descendantsByLocalNames(this, listedElements)\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.submit();\n  }\n\n  submit() {\n    if (!fireAnEvent(\"submit\", this, undefined, { bubbles: true, cancelable: true })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  _doReset() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    if (!fireAnEvent(\"reset\", this, undefined, { bubbles: true, cancelable: true })) {\n      return;\n    }\n\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttributeNS(null, \"method\");\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttributeNS(null, \"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttributeNS(null, \"enctype\");\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttributeNS(null, \"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttributeNS(null, \"action\");\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    return reflectURLAttribute(this, \"action\");\n  }\n\n  set action(V) {\n    this.setAttributeNS(null, \"action\", V);\n  }\n\n  // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n  reportValidity() {\n    return this.checkValidity();\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n  _staticallyValidateConstraints() {\n    const controls = [];\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return { result: constraintValidationPositiveResult };\n    }\n\n    const unhandledInvalidControls = [];\n    for (const invalidControl of invalidControls) {\n      const notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, { cancelable: true });\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return { result: constraintValidationNegativeResult, unhandledInvalidControls };\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}