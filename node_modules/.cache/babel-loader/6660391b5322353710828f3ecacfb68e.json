{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst {\n  parseURL,\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nconst {\n  evaluateJavaScriptURL\n} = require(\"../window/navigation\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nconst {\n  parseIntoDocument\n} = require(\"../../browser/parser\");\n\nconst {\n  documentBaseURL\n} = require(\"../helpers/document-base-url\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst {\n  getAttributeValue\n} = require(\"../attributes\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nfunction fireLoadEvent(document, frame, attaching) {\n  if (attaching) {\n    fireAnEvent(\"load\", frame);\n    return;\n  }\n\n  const dummyPromise = Promise.resolve();\n\n  function onLoad() {\n    fireAnEvent(\"load\", frame);\n  }\n\n  document._queue.push(dummyPromise, onLoad);\n}\n\nfunction fetchFrame(serializedURL, frame, document, contentDoc) {\n  const resourceLoader = document._resourceLoader;\n  let request;\n\n  function onFrameLoaded(data) {\n    const sniffOptions = {\n      defaultEncoding: document._encoding\n    };\n\n    if (request.response) {\n      const contentType = MIMEType.parse(request.response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      sniffOptions.transportLayerEncodingLabel = contentType.parameters.get(\"charset\");\n\n      if (contentType) {\n        if (contentType.isXML()) {\n          contentDoc._parsingMode = \"xml\";\n        }\n\n        contentDoc.contentType = contentType.essence;\n      }\n    }\n\n    const encoding = sniffHTMLEncoding(data, sniffOptions);\n    contentDoc._encoding = encoding;\n    const html = whatwgEncoding.decode(data, contentDoc._encoding);\n\n    try {\n      parseIntoDocument(html, contentDoc);\n    } catch (error) {\n      if (error instanceof DOMException && error.code === DOMException.SYNTAX_ERR && contentDoc._parsingMode === \"xml\") {\n        // As defined (https://html.spec.whatwg.org/#read-xml) parsing error in XML document may be reported inline by\n        // mutating the document.\n        const element = contentDoc.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n        element.textContent = error.message;\n\n        while (contentDoc.childNodes.length > 0) {\n          contentDoc.removeChild(contentDoc.lastChild);\n        }\n\n        contentDoc.appendChild(element);\n      } else {\n        throw error;\n      }\n    }\n\n    contentDoc.close();\n    return new Promise((resolve, reject) => {\n      contentDoc.addEventListener(\"load\", resolve);\n      contentDoc.addEventListener(\"error\", reject);\n    });\n  }\n\n  request = resourceLoader.fetch(serializedURL, {\n    element: frame,\n    onLoad: onFrameLoaded\n  });\n}\n\nfunction canDispatchEvents(frame, attaching) {\n  if (!attaching) {\n    return false;\n  }\n\n  return Object.keys(frame._eventListeners).length === 0;\n}\n\nfunction loadFrame(frame, attaching) {\n  if (frame._contentDocument) {\n    if (frame._contentDocument._defaultView) {\n      // close calls delete on its document.\n      frame._contentDocument._defaultView.close();\n    } else {\n      delete frame._contentDocument;\n    }\n  }\n\n  const parentDoc = frame._ownerDocument; // https://html.spec.whatwg.org/#process-the-iframe-attributes\n\n  let url;\n  const srcAttribute = getAttributeValue(frame, \"src\");\n\n  if (srcAttribute === \"\") {\n    url = parseURL(\"about:blank\");\n  } else {\n    url = parseURL(srcAttribute, {\n      baseURL: documentBaseURL(parentDoc) || undefined\n    }) || parseURL(\"about:blank\");\n  }\n\n  const serializedURL = serializeURL(url); // This is not great, but prevents a require cycle during webidl2js generation\n\n  const wnd = new parentDoc._defaultView.constructor({\n    parsingMode: \"html\",\n    url: url.scheme === \"javascript\" || serializedURL === \"about:blank\" ? parentDoc.URL : serializedURL,\n    resourceLoader: parentDoc._defaultView._resourceLoader,\n    referrer: parentDoc.URL,\n    cookieJar: parentDoc._cookieJar,\n    pool: parentDoc._pool,\n    encoding: parentDoc._encoding,\n    runScripts: parentDoc._defaultView._runScripts,\n    commonForOrigin: parentDoc._defaultView._commonForOrigin,\n    pretendToBeVisual: parentDoc._defaultView._pretendToBeVisual\n  });\n  const contentDoc = frame._contentDocument = idlUtils.implForWrapper(wnd._document);\n  const parent = parentDoc._defaultView;\n  const contentWindow = contentDoc._defaultView;\n  contentWindow._parent = parent;\n  contentWindow._top = parent.top;\n  contentWindow._frameElement = frame;\n  contentWindow._virtualConsole = parent._virtualConsole;\n\n  if (parentDoc.origin === contentDoc.origin) {\n    contentWindow._currentOriginData.windowsInSameOrigin.push(contentWindow);\n  }\n\n  const noQueue = canDispatchEvents(frame, attaching); // Handle about:blank with a simulated load of an empty document.\n\n  if (serializedURL === \"about:blank\") {\n    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.\n    parseIntoDocument(\"<html><head></head><body></body></html>\", contentDoc);\n    contentDoc.close(noQueue);\n\n    if (noQueue) {\n      fireLoadEvent(parentDoc, frame, noQueue);\n    } else {\n      contentDoc.addEventListener(\"load\", () => {\n        fireLoadEvent(parentDoc, frame);\n      });\n    }\n  } else if (url.scheme === \"javascript\") {\n    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.\n    parseIntoDocument(\"<html><head></head><body></body></html>\", contentDoc);\n    contentDoc.close(noQueue);\n    const result = evaluateJavaScriptURL(contentWindow, url);\n\n    if (typeof result === \"string\") {\n      contentDoc.body.textContent = result;\n    }\n\n    if (noQueue) {\n      fireLoadEvent(parentDoc, frame, noQueue);\n    } else {\n      contentDoc.addEventListener(\"load\", () => {\n        fireLoadEvent(parentDoc, frame);\n      });\n    }\n  } else {\n    fetchFrame(serializedURL, frame, parentDoc, contentDoc);\n  }\n}\n\nfunction refreshAccessors(document) {\n  const window = document._defaultView;\n\n  if (!window) {\n    return;\n  }\n\n  const frames = document.querySelectorAll(\"iframe,frame\"); // delete accessors for all frames\n\n  for (let i = 0; i < window._length; ++i) {\n    delete window[i];\n  }\n\n  window._length = frames.length;\n  Array.prototype.forEach.call(frames, (frame, i) => {\n    Object.defineProperty(window, i, {\n      configurable: true,\n      enumerable: true,\n\n      get() {\n        return frame.contentWindow;\n      }\n\n    });\n  });\n}\n\nclass HTMLFrameElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._contentDocument = null;\n  }\n\n  _attrModified(name, value, oldVal) {\n    super._attrModified(name, value, oldVal);\n\n    if (name === \"src\") {\n      // iframe should never load in a document without a Window\n      // (e.g. implementation.createHTMLDocument)\n      if (this._attached && this._ownerDocument._defaultView) {\n        loadFrame(this);\n      }\n    }\n  }\n\n  _detach() {\n    super._detach();\n\n    if (this.contentWindow) {\n      this.contentWindow.close();\n    }\n\n    refreshAccessors(this._ownerDocument);\n  }\n\n  _attach() {\n    super._attach();\n\n    if (this._ownerDocument._defaultView) {\n      loadFrame(this, true);\n    }\n\n    refreshAccessors(this._ownerDocument);\n  }\n\n  get contentDocument() {\n    return this._contentDocument;\n  }\n\n  get contentWindow() {\n    return this.contentDocument ? this.contentDocument._defaultView : null;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttributeNS(null, \"src\", value);\n  }\n\n  get longDesc() {\n    return reflectURLAttribute(this, \"longdesc\");\n  }\n\n  set longDesc(value) {\n    this.setAttributeNS(null, \"longdesc\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLFrameElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFrameElement-impl.js"],"names":["DOMException","require","MIMEType","whatwgEncoding","parseURL","serializeURL","sniffHTMLEncoding","evaluateJavaScriptURL","HTMLElementImpl","implementation","reflectURLAttribute","parseIntoDocument","documentBaseURL","fireAnEvent","getAttributeValue","idlUtils","fireLoadEvent","document","frame","attaching","dummyPromise","Promise","resolve","onLoad","_queue","push","fetchFrame","serializedURL","contentDoc","resourceLoader","_resourceLoader","request","onFrameLoaded","data","sniffOptions","defaultEncoding","_encoding","response","contentType","parse","headers","transportLayerEncodingLabel","parameters","get","isXML","_parsingMode","essence","encoding","html","decode","error","code","SYNTAX_ERR","element","createElementNS","textContent","message","childNodes","length","removeChild","lastChild","appendChild","close","reject","addEventListener","fetch","canDispatchEvents","Object","keys","_eventListeners","loadFrame","_contentDocument","_defaultView","parentDoc","_ownerDocument","url","srcAttribute","baseURL","undefined","wnd","constructor","parsingMode","scheme","URL","referrer","cookieJar","_cookieJar","pool","_pool","runScripts","_runScripts","commonForOrigin","_commonForOrigin","pretendToBeVisual","_pretendToBeVisual","implForWrapper","_document","parent","contentWindow","_parent","_top","top","_frameElement","_virtualConsole","origin","_currentOriginData","windowsInSameOrigin","noQueue","result","body","refreshAccessors","window","frames","querySelectorAll","i","_length","Array","prototype","forEach","call","defineProperty","configurable","enumerable","HTMLFrameElementImpl","args","privateData","_attrModified","name","value","oldVal","_attached","_detach","_attach","contentDocument","src","setAttributeNS","longDesc","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { parseURL, serializeURL } = require(\"whatwg-url\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nconst { evaluateJavaScriptURL } = require(\"../window/navigation\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst { parseIntoDocument } = require(\"../../browser/parser\");\nconst { documentBaseURL } = require(\"../helpers/document-base-url\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst { getAttributeValue } = require(\"../attributes\");\nconst idlUtils = require(\"../generated/utils\");\n\nfunction fireLoadEvent(document, frame, attaching) {\n  if (attaching) {\n    fireAnEvent(\"load\", frame);\n\n    return;\n  }\n\n  const dummyPromise = Promise.resolve();\n\n  function onLoad() {\n    fireAnEvent(\"load\", frame);\n  }\n\n  document._queue.push(dummyPromise, onLoad);\n}\n\nfunction fetchFrame(serializedURL, frame, document, contentDoc) {\n  const resourceLoader = document._resourceLoader;\n\n  let request;\n\n  function onFrameLoaded(data) {\n    const sniffOptions = {\n      defaultEncoding: document._encoding\n    };\n\n    if (request.response) {\n      const contentType = MIMEType.parse(request.response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      sniffOptions.transportLayerEncodingLabel = contentType.parameters.get(\"charset\");\n\n      if (contentType) {\n        if (contentType.isXML()) {\n          contentDoc._parsingMode = \"xml\";\n        }\n        contentDoc.contentType = contentType.essence;\n      }\n    }\n\n    const encoding = sniffHTMLEncoding(data, sniffOptions);\n    contentDoc._encoding = encoding;\n\n    const html = whatwgEncoding.decode(data, contentDoc._encoding);\n\n    try {\n      parseIntoDocument(html, contentDoc);\n    } catch (error) {\n      if (\n        error instanceof DOMException &&\n        error.code === DOMException.SYNTAX_ERR &&\n        contentDoc._parsingMode === \"xml\"\n      ) {\n        // As defined (https://html.spec.whatwg.org/#read-xml) parsing error in XML document may be reported inline by\n        // mutating the document.\n        const element = contentDoc.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n        element.textContent = error.message;\n\n        while (contentDoc.childNodes.length > 0) {\n          contentDoc.removeChild(contentDoc.lastChild);\n        }\n        contentDoc.appendChild(element);\n      } else {\n        throw error;\n      }\n    }\n\n    contentDoc.close();\n\n    return new Promise((resolve, reject) => {\n      contentDoc.addEventListener(\"load\", resolve);\n      contentDoc.addEventListener(\"error\", reject);\n    });\n  }\n\n  request = resourceLoader.fetch(serializedURL, {\n    element: frame,\n    onLoad: onFrameLoaded\n  });\n}\n\nfunction canDispatchEvents(frame, attaching) {\n  if (!attaching) {\n    return false;\n  }\n\n  return Object.keys(frame._eventListeners).length === 0;\n}\n\nfunction loadFrame(frame, attaching) {\n  if (frame._contentDocument) {\n    if (frame._contentDocument._defaultView) {\n      // close calls delete on its document.\n      frame._contentDocument._defaultView.close();\n    } else {\n      delete frame._contentDocument;\n    }\n  }\n\n  const parentDoc = frame._ownerDocument;\n\n  // https://html.spec.whatwg.org/#process-the-iframe-attributes\n  let url;\n  const srcAttribute = getAttributeValue(frame, \"src\");\n  if (srcAttribute === \"\") {\n    url = parseURL(\"about:blank\");\n  } else {\n    url = parseURL(srcAttribute, { baseURL: documentBaseURL(parentDoc) || undefined }) || parseURL(\"about:blank\");\n  }\n  const serializedURL = serializeURL(url);\n\n  // This is not great, but prevents a require cycle during webidl2js generation\n  const wnd = new parentDoc._defaultView.constructor({\n    parsingMode: \"html\",\n    url: url.scheme === \"javascript\" || serializedURL === \"about:blank\" ? parentDoc.URL : serializedURL,\n    resourceLoader: parentDoc._defaultView._resourceLoader,\n    referrer: parentDoc.URL,\n    cookieJar: parentDoc._cookieJar,\n    pool: parentDoc._pool,\n    encoding: parentDoc._encoding,\n    runScripts: parentDoc._defaultView._runScripts,\n    commonForOrigin: parentDoc._defaultView._commonForOrigin,\n    pretendToBeVisual: parentDoc._defaultView._pretendToBeVisual\n  });\n\n  const contentDoc = frame._contentDocument = idlUtils.implForWrapper(wnd._document);\n  const parent = parentDoc._defaultView;\n  const contentWindow = contentDoc._defaultView;\n  contentWindow._parent = parent;\n  contentWindow._top = parent.top;\n  contentWindow._frameElement = frame;\n  contentWindow._virtualConsole = parent._virtualConsole;\n\n  if (parentDoc.origin === contentDoc.origin) {\n    contentWindow._currentOriginData.windowsInSameOrigin.push(contentWindow);\n  }\n\n  const noQueue = canDispatchEvents(frame, attaching);\n\n  // Handle about:blank with a simulated load of an empty document.\n  if (serializedURL === \"about:blank\") {\n    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.\n    parseIntoDocument(\"<html><head></head><body></body></html>\", contentDoc);\n    contentDoc.close(noQueue);\n\n    if (noQueue) {\n      fireLoadEvent(parentDoc, frame, noQueue);\n    } else {\n      contentDoc.addEventListener(\"load\", () => {\n        fireLoadEvent(parentDoc, frame);\n      });\n    }\n  } else if (url.scheme === \"javascript\") {\n    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.\n    parseIntoDocument(\"<html><head></head><body></body></html>\", contentDoc);\n    contentDoc.close(noQueue);\n    const result = evaluateJavaScriptURL(contentWindow, url);\n    if (typeof result === \"string\") {\n      contentDoc.body.textContent = result;\n    }\n    if (noQueue) {\n      fireLoadEvent(parentDoc, frame, noQueue);\n    } else {\n      contentDoc.addEventListener(\"load\", () => {\n        fireLoadEvent(parentDoc, frame);\n      });\n    }\n  } else {\n    fetchFrame(serializedURL, frame, parentDoc, contentDoc);\n  }\n}\n\nfunction refreshAccessors(document) {\n  const window = document._defaultView;\n\n  if (!window) {\n    return;\n  }\n\n  const frames = document.querySelectorAll(\"iframe,frame\");\n\n  // delete accessors for all frames\n  for (let i = 0; i < window._length; ++i) {\n    delete window[i];\n  }\n\n  window._length = frames.length;\n  Array.prototype.forEach.call(frames, (frame, i) => {\n    Object.defineProperty(window, i, {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return frame.contentWindow;\n      }\n    });\n  });\n}\n\nclass HTMLFrameElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._contentDocument = null;\n  }\n  _attrModified(name, value, oldVal) {\n    super._attrModified(name, value, oldVal);\n    if (name === \"src\") {\n      // iframe should never load in a document without a Window\n      // (e.g. implementation.createHTMLDocument)\n      if (this._attached && this._ownerDocument._defaultView) {\n        loadFrame(this);\n      }\n    }\n  }\n\n  _detach() {\n    super._detach();\n\n    if (this.contentWindow) {\n      this.contentWindow.close();\n    }\n\n    refreshAccessors(this._ownerDocument);\n  }\n\n  _attach() {\n    super._attach();\n\n    if (this._ownerDocument._defaultView) {\n      loadFrame(this, true);\n    }\n    refreshAccessors(this._ownerDocument);\n  }\n\n  get contentDocument() {\n    return this._contentDocument;\n  }\n\n  get contentWindow() {\n    return this.contentDocument ? this.contentDocument._defaultView : null;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttributeNS(null, \"src\", value);\n  }\n\n  get longDesc() {\n    return reflectURLAttribute(this, \"longdesc\");\n  }\n\n  set longDesc(value) {\n    this.setAttributeNS(null, \"longdesc\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLFrameElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}