{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  Canvas,\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  _attrModified(name, value, oldVal) {\n    if (name === \"src\" && value !== oldVal) {\n      const document = this._ownerDocument;\n\n      if (Canvas) {\n        let error;\n\n        if (!this._image) {\n          this._image = new Canvas.Image(); // Install an error handler that just remembers the error. It is then\n          // thrown in the callback of resourceLoader.fetch() below.\n\n          this._image.onerror = function (err) {\n            error = err;\n          };\n        }\n\n        this._currentSrc = null;\n\n        if (this.hasAttributeNS(null, \"src\")) {\n          const resourceLoader = document._resourceLoader;\n          let request;\n\n          const onLoadImage = data => {\n            const {\n              response\n            } = request;\n\n            if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n              throw new Error(\"Status code: \" + response.statusCode);\n            }\n\n            error = null;\n            this._image.src = data;\n\n            if (error) {\n              throw new Error(error);\n            }\n\n            this._currentSrc = value;\n          };\n\n          request = resourceLoader.fetch(this.src, {\n            element: this,\n            onLoad: onLoadImage\n          });\n        } else {\n          this._image.src = \"\";\n        }\n      }\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttributeNS(null, \"src\", value);\n  }\n\n  get srcset() {\n    return conversions.USVString(this.getAttributeNS(null, \"srcset\"));\n  }\n\n  set srcset(value) {\n    this.setAttributeNS(null, \"srcset\", value);\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) : this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) : this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    return Boolean(this._image && this._image.complete);\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  get lowsrc() {\n    return reflectURLAttribute(this, \"lowsrc\");\n  }\n\n  set lowsrc(value) {\n    this.setAttributeNS(null, \"lowsrc\", value);\n  }\n\n  get longDesc() {\n    return reflectURLAttribute(this, \"longdesc\");\n  }\n\n  set longDesc(value) {\n    this.setAttributeNS(null, \"longdesc\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLImageElement-impl.js"],"names":["conversions","require","HTMLElementImpl","implementation","Canvas","reflectURLAttribute","HTMLImageElementImpl","_attrModified","name","value","oldVal","document","_ownerDocument","error","_image","Image","onerror","err","_currentSrc","hasAttributeNS","resourceLoader","_resourceLoader","request","onLoadImage","data","response","statusCode","undefined","Error","src","fetch","element","onLoad","_accept","setAttributeNS","srcset","USVString","getAttributeNS","height","naturalHeight","V","String","width","naturalWidth","complete","Boolean","currentSrc","lowsrc","longDesc","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst conversions = require(\"webidl-conversions\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { Canvas, reflectURLAttribute } = require(\"../../utils\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  _attrModified(name, value, oldVal) {\n    if (name === \"src\" && value !== oldVal) {\n      const document = this._ownerDocument;\n      if (Canvas) {\n        let error;\n        if (!this._image) {\n          this._image = new Canvas.Image();\n          // Install an error handler that just remembers the error. It is then\n          // thrown in the callback of resourceLoader.fetch() below.\n          this._image.onerror = function (err) {\n            error = err;\n          };\n        }\n        this._currentSrc = null;\n        if (this.hasAttributeNS(null, \"src\")) {\n          const resourceLoader = document._resourceLoader;\n          let request;\n\n          const onLoadImage = data => {\n            const { response } = request;\n\n            if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n              throw new Error(\"Status code: \" + response.statusCode);\n            }\n            error = null;\n            this._image.src = data;\n            if (error) {\n              throw new Error(error);\n            }\n            this._currentSrc = value;\n          };\n\n          request = resourceLoader.fetch(this.src, {\n            element: this,\n            onLoad: onLoadImage\n          });\n        } else {\n          this._image.src = \"\";\n        }\n      }\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttributeNS(null, \"src\", value);\n  }\n\n  get srcset() {\n    return conversions.USVString(this.getAttributeNS(null, \"srcset\"));\n  }\n\n  set srcset(value) {\n    this.setAttributeNS(null, \"srcset\", value);\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) :\n           this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) :\n           this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    return Boolean(this._image && this._image.complete);\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  get lowsrc() {\n    return reflectURLAttribute(this, \"lowsrc\");\n  }\n\n  set lowsrc(value) {\n    this.setAttributeNS(null, \"lowsrc\", value);\n  }\n\n  get longDesc() {\n    return reflectURLAttribute(this, \"longdesc\");\n  }\n\n  set longDesc(value) {\n    this.setAttributeNS(null, \"longdesc\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}