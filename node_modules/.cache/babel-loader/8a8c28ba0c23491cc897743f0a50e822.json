{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst HTMLElement = require(\"../generated/HTMLElement\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  getRoot,\n  assignSlotableForTree,\n  findFlattenedSlotables\n} = require(\"../helpers/shadow-dom\");\n\nclass HTMLSlotElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._assignedNodes = [];\n  } // https://dom.spec.whatwg.org/#slot-name\n\n\n  get name() {\n    return this.getAttributeNS(null, \"name\") || \"\";\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue); // https://dom.spec.whatwg.org/#slot-name\n\n\n    if (name === \"name\") {\n      if (value === oldValue) {\n        return;\n      }\n\n      if (value === null && oldValue === \"\") {\n        return;\n      }\n\n      if (value === \"\" && oldValue === null) {\n        return;\n      }\n\n      assignSlotableForTree(getRoot(this));\n    }\n  } // https://html.spec.whatwg.org/#dom-slot-assignednodes\n\n\n  assignedNodes(options) {\n    if (!options || !options.flatten) {\n      return this._assignedNodes.map(idlUtils.wrapperForImpl);\n    }\n\n    return findFlattenedSlotables(this).map(idlUtils.wrapperForImpl);\n  } // https://html.spec.whatwg.org/#dom-slot-assignedelements\n\n\n  assignedElements(options) {\n    return this.assignedNodes(options).filter(HTMLElement.is);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLSlotElementImpl\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSlotElement-impl.js"],"names":["idlUtils","require","HTMLElement","HTMLElementImpl","implementation","getRoot","assignSlotableForTree","findFlattenedSlotables","HTMLSlotElementImpl","constructor","args","privateData","_assignedNodes","name","getAttributeNS","_attrModified","value","oldValue","assignedNodes","options","flatten","map","wrapperForImpl","assignedElements","filter","is","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAAP,CAA8BG,cAAtD;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,qBAAX;AAAkCC,EAAAA;AAAlC,IAA6DN,OAAO,CAAC,uBAAD,CAA1E;;AAEA,MAAMO,mBAAN,SAAkCL,eAAlC,CAAkD;AAChDM,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACD,GAJ+C,CAMhD;;;AACA,MAAIC,IAAJ,GAAW;AACT,WAAO,KAAKC,cAAL,CAAoB,IAApB,EAA0B,MAA1B,KAAqC,EAA5C;AACD;;AAEDC,EAAAA,aAAa,CAACF,IAAD,EAAOG,KAAP,EAAcC,QAAd,EAAwB;AACnC,UAAMF,aAAN,CAAoBF,IAApB,EAA0BG,KAA1B,EAAiCC,QAAjC,EADmC,CAGnC;;;AACA,QAAIJ,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAIG,KAAK,KAAKC,QAAd,EAAwB;AACtB;AACD;;AAED,UAAID,KAAK,KAAK,IAAV,IAAkBC,QAAQ,KAAK,EAAnC,EAAuC;AACrC;AACD;;AAED,UAAID,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,IAAjC,EAAuC;AACrC;AACD;;AAEDX,MAAAA,qBAAqB,CAACD,OAAO,CAAC,IAAD,CAAR,CAArB;AACD;AACF,GA9B+C,CAgChD;;;AACAa,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrB,QAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,OAAzB,EAAkC;AAChC,aAAO,KAAKR,cAAL,CAAoBS,GAApB,CAAwBrB,QAAQ,CAACsB,cAAjC,CAAP;AACD;;AAED,WAAOf,sBAAsB,CAAC,IAAD,CAAtB,CAA6Bc,GAA7B,CAAiCrB,QAAQ,CAACsB,cAA1C,CAAP;AACD,GAvC+C,CAyChD;;;AACAC,EAAAA,gBAAgB,CAACJ,OAAD,EAAU;AACxB,WAAO,KAAKD,aAAL,CAAmBC,OAAnB,EAA4BK,MAA5B,CAAmCtB,WAAW,CAACuB,EAA/C,CAAP;AACD;;AA5C+C;;AA+ClDC,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA,cAAc,EAAEI;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\nconst HTMLElement = require(\"../generated/HTMLElement\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { getRoot, assignSlotableForTree, findFlattenedSlotables } = require(\"../helpers/shadow-dom\");\n\nclass HTMLSlotElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._assignedNodes = [];\n  }\n\n  // https://dom.spec.whatwg.org/#slot-name\n  get name() {\n    return this.getAttributeNS(null, \"name\") || \"\";\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    // https://dom.spec.whatwg.org/#slot-name\n    if (name === \"name\") {\n      if (value === oldValue) {\n        return;\n      }\n\n      if (value === null && oldValue === \"\") {\n        return;\n      }\n\n      if (value === \"\" && oldValue === null) {\n        return;\n      }\n\n      assignSlotableForTree(getRoot(this));\n    }\n  }\n\n  // https://html.spec.whatwg.org/#dom-slot-assignednodes\n  assignedNodes(options) {\n    if (!options || !options.flatten) {\n      return this._assignedNodes.map(idlUtils.wrapperForImpl);\n    }\n\n    return findFlattenedSlotables(this).map(idlUtils.wrapperForImpl);\n  }\n\n  // https://html.spec.whatwg.org/#dom-slot-assignedelements\n  assignedElements(options) {\n    return this.assignedNodes(options).filter(HTMLElement.is);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLSlotElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}