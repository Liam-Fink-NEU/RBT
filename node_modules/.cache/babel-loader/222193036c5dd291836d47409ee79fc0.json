{"ast":null,"code":"\"use strict\";\n\nconst {\n  isValidFloatingPointNumber,\n  isValidSimpleColor,\n  parseFloatingPointNumber,\n  stripLeadingAndTrailingASCIIWhitespace,\n  stripNewlines,\n  splitOnCommas\n} = require(\"./strings\");\n\nconst {\n  isValidDateString,\n  isValidMonthString,\n  isValidTimeString,\n  isValidWeekString,\n  parseLocalDateAndTimeString,\n  serializeNormalizedDateAndTime\n} = require(\"./dates-and-times\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst NodeList = require(\"../generated/NodeList\");\n\nconst {\n  domSymbolTree\n} = require(\"./internal-constants\");\n\nconst {\n  closest,\n  firstChildWithLocalName\n} = require(\"./traversal\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  HTML_NS\n} = require(\"./namespaces\");\n\nconst submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\nexports.isDisabled = formControl => {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" || formControl.localName === \"textarea\") {\n    if (formControl.hasAttributeNS(null, \"disabled\")) {\n      return true;\n    }\n  }\n\n  let e = formControl.parentNode;\n\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttributeNS(null, \"disabled\")) {\n      const firstLegendElementChild = firstChildWithLocalName(e, \"legend\");\n\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.isSubmittable = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\n\nexports.isButton = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" || formControl.type === \"image\" || formControl.localName === \"button\";\n};\n\nexports.normalizeToCRLF = string => {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\").replace(/\\r$/, \"\\r\\n\").replace(/([^\\r])\\n/g, \"$1\\r\\n\").replace(/^\\n/, \"\\r\\n\");\n};\n\nexports.isLabelable = node => {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = labelable => {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n\n  if (!labelable._labels) {\n    const root = labelable.getRootNode({});\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: () => {\n        const nodes = [];\n\n        for (const descendant of domSymbolTree.treeIterator(root)) {\n          if (descendant.control === labelable) {\n            nodes.push(descendant);\n          }\n        }\n\n        return nodes;\n      }\n    });\n  }\n\n  return labelable._labels;\n}; // https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n\n\nexports.isValidEmailAddress = (emailAddress, multiple = false) => {\n  const emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" + \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" + \"[a-zA-Z0-9])?)*$\"); // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(value => emailAddressRegExp.test(value));\n  }\n\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = url => {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = (input, val) => {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"datetime-local\":\n      {\n        // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n        const dateAndTime = parseLocalDateAndTimeString(val);\n        val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n        break;\n      }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttributeNS(null, \"multiple\")) {\n        val = val.split(\",\").map(token => stripLeadingAndTrailingASCIIWhitespace(token)).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        const minimum = input._minimum;\n        const maximum = input._maximum;\n        const defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = `${defaultValue}`;\n      }\n\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n\n  }\n\n  return val;\n}; // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-owner\n// TODO: The spec describes an imperative process for assigning/resetting an element's form\n// owner based on activities involving form-associated elements. This simpler implementation\n// instead calculates the current form owner only when the property is accessed. This is not\n// sufficient to pass all the web platform tests, but is good enough for most purposes. We\n// should eventually update it to use the correct version, though. See\n// https://github.com/whatwg/html/issues/4050 for some discussion.\n\n\nexports.formOwner = formControl => {\n  const formAttr = formControl.getAttributeNS(null, \"form\");\n\n  if (formAttr === \"\") {\n    return null;\n  }\n\n  if (formAttr === null) {\n    return closest(formControl, \"form\");\n  }\n\n  const root = formControl.getRootNode({});\n  let firstElementWithId;\n\n  for (const descendant of domSymbolTree.treeIterator(root)) {\n    if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, \"id\") === formAttr) {\n      firstElementWithId = descendant;\n      break;\n    }\n  }\n\n  if (firstElementWithId && firstElementWithId.namespaceURI === HTML_NS && firstElementWithId.localName === \"form\") {\n    return firstElementWithId;\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/helpers/form-controls.js"],"names":["isValidFloatingPointNumber","isValidSimpleColor","parseFloatingPointNumber","stripLeadingAndTrailingASCIIWhitespace","stripNewlines","splitOnCommas","require","isValidDateString","isValidMonthString","isValidTimeString","isValidWeekString","parseLocalDateAndTimeString","serializeNormalizedDateAndTime","whatwgURL","NodeList","domSymbolTree","closest","firstChildWithLocalName","NODE_TYPE","HTML_NS","submittableLocalNames","Set","exports","isDisabled","formControl","localName","hasAttributeNS","e","parentNode","firstLegendElementChild","contains","isSubmittable","has","isButton","type","normalizeToCRLF","string","replace","isLabelable","node","nodeType","ELEMENT_NODE","tagName","getLabelsForLabelable","labelable","_labels","root","getRootNode","create","element","query","nodes","descendant","treeIterator","control","push","isValidEmailAddress","emailAddress","multiple","emailAddressRegExp","RegExp","every","value","test","isValidAbsoluteURL","url","parseURL","sanitizeValueByType","input","val","toLowerCase","dateAndTime","split","map","token","join","isNaN","minimum","_minimum","maximum","_maximum","defaultValue","formOwner","formAttr","getAttributeNS","firstElementWithId","namespaceURI"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  isValidFloatingPointNumber,\n  isValidSimpleColor,\n  parseFloatingPointNumber,\n  stripLeadingAndTrailingASCIIWhitespace,\n  stripNewlines,\n  splitOnCommas\n} = require(\"./strings\");\nconst {\n  isValidDateString,\n  isValidMonthString,\n  isValidTimeString,\n  isValidWeekString,\n  parseLocalDateAndTimeString,\n  serializeNormalizedDateAndTime\n} = require(\"./dates-and-times\");\nconst whatwgURL = require(\"whatwg-url\");\n\nconst NodeList = require(\"../generated/NodeList\");\nconst { domSymbolTree } = require(\"./internal-constants\");\nconst { closest, firstChildWithLocalName } = require(\"./traversal\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { HTML_NS } = require(\"./namespaces\");\n\nconst submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\nexports.isDisabled = formControl => {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" ||\n      formControl.localName === \"textarea\") {\n    if (formControl.hasAttributeNS(null, \"disabled\")) {\n      return true;\n    }\n  }\n\n  let e = formControl.parentNode;\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttributeNS(null, \"disabled\")) {\n      const firstLegendElementChild = firstChildWithLocalName(e, \"legend\");\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.isSubmittable = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\n\nexports.isButton = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" ||\n         formControl.type === \"image\" || formControl.localName === \"button\";\n};\n\nexports.normalizeToCRLF = string => {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\")\n    .replace(/\\r$/, \"\\r\\n\")\n    .replace(/([^\\r])\\n/g, \"$1\\r\\n\")\n    .replace(/^\\n/, \"\\r\\n\");\n};\n\nexports.isLabelable = node => {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = labelable => {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n  if (!labelable._labels) {\n    const root = labelable.getRootNode({});\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: () => {\n        const nodes = [];\n        for (const descendant of domSymbolTree.treeIterator(root)) {\n          if (descendant.control === labelable) {\n            nodes.push(descendant);\n          }\n        }\n        return nodes;\n      }\n    });\n  }\n  return labelable._labels;\n};\n\n// https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\nexports.isValidEmailAddress = (emailAddress, multiple = false) => {\n  const emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" +\n    \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" +\n    \"[a-zA-Z0-9])?)*$\");\n  // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(value => emailAddressRegExp.test(value));\n  }\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = url => {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = (input, val) => {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"datetime-local\": {\n      // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n      const dateAndTime = parseLocalDateAndTimeString(val);\n      val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n      break;\n    }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttributeNS(null, \"multiple\")) {\n        val = val.split(\",\").map(token => stripLeadingAndTrailingASCIIWhitespace(token)).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        const minimum = input._minimum;\n        const maximum = input._maximum;\n        const defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = `${defaultValue}`;\n      }\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n  }\n\n  return val;\n};\n\n// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-owner\n// TODO: The spec describes an imperative process for assigning/resetting an element's form\n// owner based on activities involving form-associated elements. This simpler implementation\n// instead calculates the current form owner only when the property is accessed. This is not\n// sufficient to pass all the web platform tests, but is good enough for most purposes. We\n// should eventually update it to use the correct version, though. See\n// https://github.com/whatwg/html/issues/4050 for some discussion.\n\nexports.formOwner = formControl => {\n  const formAttr = formControl.getAttributeNS(null, \"form\");\n  if (formAttr === \"\") {\n    return null;\n  }\n  if (formAttr === null) {\n    return closest(formControl, \"form\");\n  }\n\n  const root = formControl.getRootNode({});\n  let firstElementWithId;\n  for (const descendant of domSymbolTree.treeIterator(root)) {\n    if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE &&\n      descendant.getAttributeNS(null, \"id\") === formAttr) {\n      firstElementWithId = descendant;\n      break;\n    }\n  }\n\n  if (firstElementWithId &&\n    firstElementWithId.namespaceURI === HTML_NS &&\n    firstElementWithId.localName === \"form\") {\n    return firstElementWithId;\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"script"}