{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nconst CharacterData = require(\"./CharacterData.js\");\n\nclass Comment extends CharacterData.interface {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to construct 'Comment': parameter 1\"\n        });\n      } else {\n        curArg = \"\";\n      }\n\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n}\n\nObject.defineProperties(Comment.prototype, {\n  [Symbol.toStringTag]: {\n    value: \"Comment\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'Comment'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    CharacterData._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Comment,\n  expose: {\n    Window: {\n      Comment\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/Comment-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/Comment.js"],"names":["conversions","require","utils","impl","implSymbol","CharacterData","Comment","interface","constructor","args","curArg","arguments","undefined","context","push","iface","setup","Object","create","new","target","prototype","defineProperties","Symbol","toStringTag","value","configurable","_mixedIntoPredicates","is","obj","hasOwn","Impl","implementation","isMixedInto","module","exports","isImpl","wrapper","wrapperForImpl","convert","implForWrapper","TypeError","constructorArgs","privateData","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\nconst CharacterData = require(\"./CharacterData.js\");\n\nclass Comment extends CharacterData.interface {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg !== undefined) {\n        curArg = conversions[\"DOMString\"](curArg, { context: \"Failed to construct 'Comment': parameter 1\" });\n      } else {\n        curArg = \"\";\n      }\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n}\nObject.defineProperties(Comment.prototype, { [Symbol.toStringTag]: { value: \"Comment\", configurable: true } });\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'Comment'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Comment.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {\n    CharacterData._internalSetup(obj);\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: Comment,\n  expose: {\n    Window: { Comment }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/Comment-impl.js\");\n"]},"metadata":{},"sourceType":"script"}