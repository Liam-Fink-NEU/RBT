{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertNode = require(\"./Node.js\").convert;\n\nconst convertMutationObserverInit = require(\"./MutationObserverInit.js\").convert;\n\nconst impl = utils.implSymbol;\n\nclass MutationObserver {\n  constructor(callback) {\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to construct 'MutationObserver': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = utils.tryImplForWrapper(curArg);\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  observe(target) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'observe' on 'MutationObserver': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertNode(curArg, {\n        context: \"Failed to execute 'observe' on 'MutationObserver': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = convertMutationObserverInit(curArg, {\n        context: \"Failed to execute 'observe' on 'MutationObserver': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].observe(...args);\n  }\n\n  disconnect() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl].disconnect();\n  }\n\n  takeRecords() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].takeRecords());\n  }\n\n}\n\nObject.defineProperties(MutationObserver.prototype, {\n  observe: {\n    enumerable: true\n  },\n  disconnect: {\n    enumerable: true\n  },\n  takeRecords: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"MutationObserver\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'MutationObserver'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(MutationObserver.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(MutationObserver.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: MutationObserver,\n  expose: {\n    Window: {\n      MutationObserver\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../mutation-observer/MutationObserver-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/MutationObserver.js"],"names":["conversions","require","utils","convertNode","convert","convertMutationObserverInit","impl","implSymbol","MutationObserver","constructor","callback","arguments","length","TypeError","args","curArg","tryImplForWrapper","push","iface","setup","Object","create","new","target","prototype","observe","module","exports","is","context","disconnect","takeRecords","tryWrapperForImpl","defineProperties","enumerable","Symbol","toStringTag","value","configurable","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","constructorArgs","privateData","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","interface","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertNode = require(\"./Node.js\").convert;\nconst convertMutationObserverInit = require(\"./MutationObserverInit.js\").convert;\nconst impl = utils.implSymbol;\n\nclass MutationObserver {\n  constructor(callback) {\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to construct 'MutationObserver': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = utils.tryImplForWrapper(curArg);\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  observe(target) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'MutationObserver': 1 argument required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertNode(curArg, { context: \"Failed to execute 'observe' on 'MutationObserver': parameter 1\" });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = convertMutationObserverInit(curArg, {\n        context: \"Failed to execute 'observe' on 'MutationObserver': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].observe(...args);\n  }\n\n  disconnect() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl].disconnect();\n  }\n\n  takeRecords() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl].takeRecords());\n  }\n}\nObject.defineProperties(MutationObserver.prototype, {\n  observe: { enumerable: true },\n  disconnect: { enumerable: true },\n  takeRecords: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"MutationObserver\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'MutationObserver'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(MutationObserver.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(MutationObserver.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: MutationObserver,\n  expose: {\n    Window: { MutationObserver }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../mutation-observer/MutationObserver-impl.js\");\n"]},"metadata":{},"sourceType":"script"}