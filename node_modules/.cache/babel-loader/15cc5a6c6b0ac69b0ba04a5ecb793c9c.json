{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertAttr = require(\"./Attr.js\").convert;\n\nconst impl = utils.implSymbol;\n\nclass NamedNodeMap {\n  constructor() {\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  item(index) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'item' on 'NamedNodeMap': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"unsigned long\"](curArg, {\n        context: \"Failed to execute 'item' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].item(...args));\n  }\n\n  getNamedItem(qualifiedName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'getNamedItem' on 'NamedNodeMap': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getNamedItem' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getNamedItem(...args));\n  }\n\n  getNamedItemNS(namespace, localName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': parameter 1\"\n        });\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getNamedItemNS(...args));\n  }\n\n  setNamedItem(attr) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'setNamedItem' on 'NamedNodeMap': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAttr(curArg, {\n        context: \"Failed to execute 'setNamedItem' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].setNamedItem(...args));\n  }\n\n  setNamedItemNS(attr) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'setNamedItemNS' on 'NamedNodeMap': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAttr(curArg, {\n        context: \"Failed to execute 'setNamedItemNS' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].setNamedItemNS(...args));\n  }\n\n  removeNamedItem(qualifiedName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'removeNamedItem' on 'NamedNodeMap': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeNamedItem' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].removeNamedItem(...args));\n  }\n\n  removeNamedItemNS(namespace, localName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': parameter 1\"\n        });\n      }\n\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].removeNamedItemNS(...args));\n  }\n\n  get length() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"length\"];\n  }\n\n}\n\nObject.defineProperties(NamedNodeMap.prototype, {\n  item: {\n    enumerable: true\n  },\n  getNamedItem: {\n    enumerable: true\n  },\n  getNamedItemNS: {\n    enumerable: true\n  },\n  setNamedItem: {\n    enumerable: true\n  },\n  setNamedItemNS: {\n    enumerable: true\n  },\n  removeNamedItem: {\n    enumerable: true\n  },\n  removeNamedItemNS: {\n    enumerable: true\n  },\n  length: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"NamedNodeMap\",\n    configurable: true\n  },\n  [Symbol.iterator]: {\n    value: Array.prototype[Symbol.iterator],\n    configurable: true,\n    writable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'NamedNodeMap'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(NamedNodeMap.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(NamedNodeMap.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj = new Proxy(obj, {\n      get(target, P, receiver) {\n        if (typeof P === \"symbol\") {\n          return Reflect.get(target, P, receiver);\n        }\n\n        const desc = this.getOwnPropertyDescriptor(target, P);\n\n        if (desc === undefined) {\n          const parent = Object.getPrototypeOf(target);\n\n          if (parent === null) {\n            return undefined;\n          }\n\n          return Reflect.get(target, P, receiver);\n        }\n\n        if (!desc.get && !desc.set) {\n          return desc.value;\n        }\n\n        const getter = desc.get;\n\n        if (getter === undefined) {\n          return undefined;\n        }\n\n        return Reflect.apply(getter, receiver, []);\n      },\n\n      has(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.has(target, P);\n        }\n\n        const desc = this.getOwnPropertyDescriptor(target, P);\n\n        if (desc !== undefined) {\n          return true;\n        }\n\n        const parent = Object.getPrototypeOf(target);\n\n        if (parent !== null) {\n          return Reflect.has(parent, P);\n        }\n\n        return false;\n      },\n\n      ownKeys(target) {\n        const keys = new Set();\n\n        for (const key of target[impl][utils.supportedPropertyIndices]) {\n          keys.add(`${key}`);\n        }\n\n        for (const key of target[impl][utils.supportedPropertyNames]) {\n          if (!(key in target)) {\n            keys.add(`${key}`);\n          }\n        }\n\n        for (const key of Reflect.ownKeys(target)) {\n          keys.add(key);\n        }\n\n        return [...keys];\n      },\n\n      getOwnPropertyDescriptor(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.getOwnPropertyDescriptor(target, P);\n        }\n\n        let ignoreNamedProps = false;\n\n        if (utils.isArrayIndexPropName(P)) {\n          const index = P >>> 0;\n          const indexedValue = target[impl].item(index);\n\n          if (indexedValue !== null) {\n            return {\n              writable: false,\n              enumerable: true,\n              configurable: true,\n              value: utils.tryWrapperForImpl(indexedValue)\n            };\n          }\n\n          ignoreNamedProps = true;\n        }\n\n        const namedValue = target[impl].getNamedItem(P);\n\n        if (namedValue !== null && !(P in target) && !ignoreNamedProps) {\n          return {\n            writable: false,\n            enumerable: false,\n            configurable: true,\n            value: utils.tryWrapperForImpl(namedValue)\n          };\n        }\n\n        return Reflect.getOwnPropertyDescriptor(target, P);\n      },\n\n      set(target, P, V, receiver) {\n        if (typeof P === \"symbol\") {\n          return Reflect.set(target, P, V, receiver);\n        }\n\n        if (target === receiver) {\n          utils.isArrayIndexPropName(P);\n          typeof P === \"string\" && !utils.isArrayIndexPropName(P);\n        }\n\n        let ownDesc;\n\n        if (utils.isArrayIndexPropName(P)) {\n          const index = P >>> 0;\n          const indexedValue = target[impl].item(index);\n\n          if (indexedValue !== null) {\n            ownDesc = {\n              writable: false,\n              enumerable: true,\n              configurable: true,\n              value: utils.tryWrapperForImpl(indexedValue)\n            };\n          }\n        }\n\n        if (ownDesc === undefined) {\n          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);\n        }\n\n        if (ownDesc === undefined) {\n          const parent = Reflect.getPrototypeOf(target);\n\n          if (parent !== null) {\n            return Reflect.set(parent, P, V, receiver);\n          }\n\n          ownDesc = {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: undefined\n          };\n        }\n\n        if (!ownDesc.writable) {\n          return false;\n        }\n\n        if (!utils.isObject(receiver)) {\n          return false;\n        }\n\n        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);\n        let valueDesc;\n\n        if (existingDesc !== undefined) {\n          if (existingDesc.get || existingDesc.set) {\n            return false;\n          }\n\n          if (!existingDesc.writable) {\n            return false;\n          }\n\n          valueDesc = {\n            value: V\n          };\n        } else {\n          valueDesc = {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: V\n          };\n        }\n\n        return Reflect.defineProperty(receiver, P, valueDesc);\n      },\n\n      defineProperty(target, P, desc) {\n        if (typeof P === \"symbol\") {\n          return Reflect.defineProperty(target, P, desc);\n        }\n\n        if (utils.isArrayIndexPropName(P)) {\n          return false;\n        }\n\n        if (!utils.hasOwn(target, P)) {\n          const creating = !(target[impl].getNamedItem(P) !== null);\n\n          if (!creating) {\n            return false;\n          }\n        }\n\n        return Reflect.defineProperty(target, P, desc);\n      },\n\n      deleteProperty(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.deleteProperty(target, P);\n        }\n\n        if (utils.isArrayIndexPropName(P)) {\n          const index = P >>> 0;\n          return !(target[impl].item(index) !== null);\n        }\n\n        if (target[impl].getNamedItem(P) !== null && !(P in target)) {\n          return false;\n        }\n\n        return Reflect.deleteProperty(target, P);\n      },\n\n      preventExtensions() {\n        return false;\n      }\n\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: NamedNodeMap,\n  expose: {\n    Window: {\n      NamedNodeMap\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../attributes/NamedNodeMap-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/NamedNodeMap.js"],"names":["conversions","require","utils","convertAttr","convert","impl","implSymbol","NamedNodeMap","constructor","TypeError","item","index","module","exports","is","arguments","length","args","curArg","context","push","tryWrapperForImpl","getNamedItem","qualifiedName","getNamedItemNS","namespace","localName","undefined","setNamedItem","attr","setNamedItemNS","removeNamedItem","removeNamedItemNS","Object","defineProperties","prototype","enumerable","Symbol","toStringTag","value","configurable","iterator","Array","writable","iface","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","create","constructorArgs","privateData","setup","createImpl","_internalSetup","defineProperty","Proxy","get","target","P","receiver","Reflect","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","set","getter","apply","has","ownKeys","keys","Set","key","supportedPropertyIndices","add","supportedPropertyNames","ignoreNamedProps","isArrayIndexPropName","indexedValue","namedValue","V","ownDesc","isObject","existingDesc","valueDesc","creating","deleteProperty","preventExtensions","wrapperSymbol","init","interface","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertAttr = require(\"./Attr.js\").convert;\nconst impl = utils.implSymbol;\n\nclass NamedNodeMap {\n  constructor() {\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  item(index) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'item' on 'NamedNodeMap': 1 argument required, but only \" + arguments.length + \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"unsigned long\"](curArg, {\n        context: \"Failed to execute 'item' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].item(...args));\n  }\n\n  getNamedItem(qualifiedName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'getNamedItem' on 'NamedNodeMap': 1 argument required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getNamedItem' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getNamedItem(...args));\n  }\n\n  getNamedItemNS(namespace, localName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': 2 arguments required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': parameter 1\"\n        });\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getNamedItemNS(...args));\n  }\n\n  setNamedItem(attr) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'setNamedItem' on 'NamedNodeMap': 1 argument required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAttr(curArg, { context: \"Failed to execute 'setNamedItem' on 'NamedNodeMap': parameter 1\" });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].setNamedItem(...args));\n  }\n\n  setNamedItemNS(attr) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'setNamedItemNS' on 'NamedNodeMap': 1 argument required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAttr(curArg, { context: \"Failed to execute 'setNamedItemNS' on 'NamedNodeMap': parameter 1\" });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].setNamedItemNS(...args));\n  }\n\n  removeNamedItem(qualifiedName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        \"Failed to execute 'removeNamedItem' on 'NamedNodeMap': 1 argument required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeNamedItem' on 'NamedNodeMap': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].removeNamedItem(...args));\n  }\n\n  removeNamedItemNS(namespace, localName) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': 2 arguments required, but only \" +\n          arguments.length +\n          \" present.\"\n      );\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': parameter 1\"\n        });\n      }\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].removeNamedItemNS(...args));\n  }\n\n  get length() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"length\"];\n  }\n}\nObject.defineProperties(NamedNodeMap.prototype, {\n  item: { enumerable: true },\n  getNamedItem: { enumerable: true },\n  getNamedItemNS: { enumerable: true },\n  setNamedItem: { enumerable: true },\n  setNamedItemNS: { enumerable: true },\n  removeNamedItem: { enumerable: true },\n  removeNamedItemNS: { enumerable: true },\n  length: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"NamedNodeMap\", configurable: true },\n  [Symbol.iterator]: { value: Array.prototype[Symbol.iterator], configurable: true, writable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'NamedNodeMap'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(NamedNodeMap.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(NamedNodeMap.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj = new Proxy(obj, {\n      get(target, P, receiver) {\n        if (typeof P === \"symbol\") {\n          return Reflect.get(target, P, receiver);\n        }\n        const desc = this.getOwnPropertyDescriptor(target, P);\n        if (desc === undefined) {\n          const parent = Object.getPrototypeOf(target);\n          if (parent === null) {\n            return undefined;\n          }\n          return Reflect.get(target, P, receiver);\n        }\n        if (!desc.get && !desc.set) {\n          return desc.value;\n        }\n        const getter = desc.get;\n        if (getter === undefined) {\n          return undefined;\n        }\n        return Reflect.apply(getter, receiver, []);\n      },\n\n      has(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.has(target, P);\n        }\n        const desc = this.getOwnPropertyDescriptor(target, P);\n        if (desc !== undefined) {\n          return true;\n        }\n        const parent = Object.getPrototypeOf(target);\n        if (parent !== null) {\n          return Reflect.has(parent, P);\n        }\n        return false;\n      },\n\n      ownKeys(target) {\n        const keys = new Set();\n\n        for (const key of target[impl][utils.supportedPropertyIndices]) {\n          keys.add(`${key}`);\n        }\n\n        for (const key of target[impl][utils.supportedPropertyNames]) {\n          if (!(key in target)) {\n            keys.add(`${key}`);\n          }\n        }\n\n        for (const key of Reflect.ownKeys(target)) {\n          keys.add(key);\n        }\n        return [...keys];\n      },\n\n      getOwnPropertyDescriptor(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.getOwnPropertyDescriptor(target, P);\n        }\n        let ignoreNamedProps = false;\n\n        if (utils.isArrayIndexPropName(P)) {\n          const index = P >>> 0;\n          const indexedValue = target[impl].item(index);\n          if (indexedValue !== null) {\n            return {\n              writable: false,\n              enumerable: true,\n              configurable: true,\n              value: utils.tryWrapperForImpl(indexedValue)\n            };\n          }\n          ignoreNamedProps = true;\n        }\n\n        const namedValue = target[impl].getNamedItem(P);\n\n        if (namedValue !== null && !(P in target) && !ignoreNamedProps) {\n          return {\n            writable: false,\n            enumerable: false,\n            configurable: true,\n            value: utils.tryWrapperForImpl(namedValue)\n          };\n        }\n\n        return Reflect.getOwnPropertyDescriptor(target, P);\n      },\n\n      set(target, P, V, receiver) {\n        if (typeof P === \"symbol\") {\n          return Reflect.set(target, P, V, receiver);\n        }\n        if (target === receiver) {\n          utils.isArrayIndexPropName(P);\n\n          typeof P === \"string\" && !utils.isArrayIndexPropName(P);\n        }\n        let ownDesc;\n\n        if (utils.isArrayIndexPropName(P)) {\n          const index = P >>> 0;\n          const indexedValue = target[impl].item(index);\n          if (indexedValue !== null) {\n            ownDesc = {\n              writable: false,\n              enumerable: true,\n              configurable: true,\n              value: utils.tryWrapperForImpl(indexedValue)\n            };\n          }\n        }\n\n        if (ownDesc === undefined) {\n          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);\n        }\n        if (ownDesc === undefined) {\n          const parent = Reflect.getPrototypeOf(target);\n          if (parent !== null) {\n            return Reflect.set(parent, P, V, receiver);\n          }\n          ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };\n        }\n        if (!ownDesc.writable) {\n          return false;\n        }\n        if (!utils.isObject(receiver)) {\n          return false;\n        }\n        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);\n        let valueDesc;\n        if (existingDesc !== undefined) {\n          if (existingDesc.get || existingDesc.set) {\n            return false;\n          }\n          if (!existingDesc.writable) {\n            return false;\n          }\n          valueDesc = { value: V };\n        } else {\n          valueDesc = { writable: true, enumerable: true, configurable: true, value: V };\n        }\n        return Reflect.defineProperty(receiver, P, valueDesc);\n      },\n\n      defineProperty(target, P, desc) {\n        if (typeof P === \"symbol\") {\n          return Reflect.defineProperty(target, P, desc);\n        }\n\n        if (utils.isArrayIndexPropName(P)) {\n          return false;\n        }\n        if (!utils.hasOwn(target, P)) {\n          const creating = !(target[impl].getNamedItem(P) !== null);\n          if (!creating) {\n            return false;\n          }\n        }\n        return Reflect.defineProperty(target, P, desc);\n      },\n\n      deleteProperty(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.deleteProperty(target, P);\n        }\n\n        if (utils.isArrayIndexPropName(P)) {\n          const index = P >>> 0;\n          return !(target[impl].item(index) !== null);\n        }\n\n        if (target[impl].getNamedItem(P) !== null && !(P in target)) {\n          return false;\n        }\n\n        return Reflect.deleteProperty(target, P);\n      },\n\n      preventExtensions() {\n        return false;\n      }\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: NamedNodeMap,\n  expose: {\n    Window: { NamedNodeMap }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../attributes/NamedNodeMap-impl.js\");\n"]},"metadata":{},"sourceType":"script"}