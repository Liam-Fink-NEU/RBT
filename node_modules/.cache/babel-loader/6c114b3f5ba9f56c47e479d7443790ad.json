{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertAssignedNodesOptions = require(\"./AssignedNodesOptions.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nclass HTMLSlotElement extends HTMLElement.interface {\n  constructor() {\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  assignedNodes() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAssignedNodesOptions(curArg, {\n        context: \"Failed to execute 'assignedNodes' on 'HTMLSlotElement': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].assignedNodes(...args));\n  }\n\n  assignedElements() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAssignedNodesOptions(curArg, {\n        context: \"Failed to execute 'assignedElements' on 'HTMLSlotElement': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].assignedElements(...args));\n  }\n\n  get name() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttributeNS(null, \"name\");\n    return value === null ? \"\" : value;\n  }\n\n  set name(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'name' property on 'HTMLSlotElement': The provided value\"\n    });\n    this.setAttributeNS(null, \"name\", V);\n  }\n\n}\n\nObject.defineProperties(HTMLSlotElement.prototype, {\n  assignedNodes: {\n    enumerable: true\n  },\n  assignedElements: {\n    enumerable: true\n  },\n  name: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"HTMLSlotElement\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'HTMLSlotElement'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLSlotElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLSlotElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: HTMLSlotElement,\n  expose: {\n    Window: {\n      HTMLSlotElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/HTMLSlotElement-impl.js\");","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/generated/HTMLSlotElement.js"],"names":["conversions","require","utils","convertAssignedNodesOptions","convert","impl","implSymbol","HTMLElement","HTMLSlotElement","interface","constructor","TypeError","assignedNodes","module","exports","is","args","curArg","arguments","context","push","tryWrapperForImpl","assignedElements","name","value","getAttributeNS","V","setAttributeNS","Object","defineProperties","prototype","enumerable","Symbol","toStringTag","configurable","iface","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","create","constructorArgs","privateData","setup","createImpl","_internalSetup","defineProperty","wrapperSymbol","init","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertAssignedNodesOptions = require(\"./AssignedNodesOptions.js\").convert;\nconst impl = utils.implSymbol;\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nclass HTMLSlotElement extends HTMLElement.interface {\n  constructor() {\n    throw new TypeError(\"Illegal constructor\");\n  }\n\n  assignedNodes() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAssignedNodesOptions(curArg, {\n        context: \"Failed to execute 'assignedNodes' on 'HTMLSlotElement': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].assignedNodes(...args));\n  }\n\n  assignedElements() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = convertAssignedNodesOptions(curArg, {\n        context: \"Failed to execute 'assignedElements' on 'HTMLSlotElement': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].assignedElements(...args));\n  }\n\n  get name() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttributeNS(null, \"name\");\n    return value === null ? \"\" : value;\n  }\n\n  set name(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'name' property on 'HTMLSlotElement': The provided value\"\n    });\n\n    this.setAttributeNS(null, \"name\", V);\n  }\n}\nObject.defineProperties(HTMLSlotElement.prototype, {\n  assignedNodes: { enumerable: true },\n  assignedElements: { enumerable: true },\n  name: { enumerable: true },\n  [Symbol.toStringTag]: { value: \"HTMLSlotElement\", configurable: true }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'HTMLSlotElement'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLSlotElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLSlotElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: HTMLSlotElement,\n  expose: {\n    Window: { HTMLSlotElement }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/HTMLSlotElement-impl.js\");\n"]},"metadata":{},"sourceType":"script"}