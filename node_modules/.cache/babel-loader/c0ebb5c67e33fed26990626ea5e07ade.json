{"ast":null,"code":"\"use strict\";\n\nconst {\n  produceXMLSerialization\n} = require(\"w3c-xmlserializer\");\n\nconst parse5 = require(\"parse5\");\n\nconst utils = require(\"../generated/utils\");\n\nconst treeAdapter = require(\"./parse5-adapter-serialization\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst NAMESPACES = require(\"../helpers/namespaces\");\n\nfunction htmlSerialization(node) {\n  if (node.nodeType === NODE_TYPE.ELEMENT_NODE && node.namespaceURI === NAMESPACES.HTML_NS && node.tagName === \"TEMPLATE\") {\n    node = node.content;\n  }\n\n  return parse5.serialize(node, {\n    treeAdapter\n  });\n}\n\nmodule.exports.fragmentSerialization = (node, {\n  requireWellFormed\n}) => {\n  const contextDocument = node.nodeType === NODE_TYPE.DOCUMENT_NODE ? node : node._ownerDocument;\n\n  if (contextDocument._parsingMode === \"html\") {\n    return htmlSerialization(node);\n  }\n\n  const childNodes = node.childNodesForSerializing || node.childNodes;\n  let serialized = \"\";\n\n  for (let i = 0; i < childNodes.length; ++i) {\n    serialized += produceXMLSerialization(utils.wrapperForImpl(childNodes[i] || childNodes.item(i)), requireWellFormed);\n  }\n\n  return serialized;\n};","map":{"version":3,"sources":["/Users/liamfink/class-app/node_modules/jsdom/lib/jsdom/living/domparsing/serialization.js"],"names":["produceXMLSerialization","require","parse5","utils","treeAdapter","NODE_TYPE","NAMESPACES","htmlSerialization","node","nodeType","ELEMENT_NODE","namespaceURI","HTML_NS","tagName","content","serialize","module","exports","fragmentSerialization","requireWellFormed","contextDocument","DOCUMENT_NODE","_ownerDocument","_parsingMode","childNodes","childNodesForSerializing","serialized","i","length","wrapperForImpl","item"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA8BC,OAAO,CAAC,mBAAD,CAA3C;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAME,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,gCAAD,CAA3B;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,uBAAD,CAA1B;;AAEA,SAASM,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,MACEA,IAAI,CAACC,QAAL,KAAkBJ,SAAS,CAACK,YAA5B,IACAF,IAAI,CAACG,YAAL,KAAsBL,UAAU,CAACM,OADjC,IAEAJ,IAAI,CAACK,OAAL,KAAiB,UAHnB,EAIE;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAACM,OAAZ;AACD;;AAED,SAAOZ,MAAM,CAACa,SAAP,CAAiBP,IAAjB,EAAuB;AAAEJ,IAAAA;AAAF,GAAvB,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,CAAeC,qBAAf,GAAuC,CAACV,IAAD,EAAO;AAAEW,EAAAA;AAAF,CAAP,KAAiC;AACtE,QAAMC,eAAe,GACnBZ,IAAI,CAACC,QAAL,KAAkBJ,SAAS,CAACgB,aAA5B,GAA4Cb,IAA5C,GAAmDA,IAAI,CAACc,cAD1D;;AAEA,MAAIF,eAAe,CAACG,YAAhB,KAAiC,MAArC,EAA6C;AAC3C,WAAOhB,iBAAiB,CAACC,IAAD,CAAxB;AACD;;AAED,QAAMgB,UAAU,GAAGhB,IAAI,CAACiB,wBAAL,IAAiCjB,IAAI,CAACgB,UAAzD;AACA,MAAIE,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuC,EAAED,CAAzC,EAA4C;AAC1CD,IAAAA,UAAU,IAAI1B,uBAAuB,CACnCG,KAAK,CAAC0B,cAAN,CAAqBL,UAAU,CAACG,CAAD,CAAV,IAAiBH,UAAU,CAACM,IAAX,CAAgBH,CAAhB,CAAtC,CADmC,EAEnCR,iBAFmC,CAArC;AAID;;AACD,SAAOO,UAAP;AACD,CAhBD","sourcesContent":["\"use strict\";\n\nconst { produceXMLSerialization } = require(\"w3c-xmlserializer\");\nconst parse5 = require(\"parse5\");\n\nconst utils = require(\"../generated/utils\");\nconst treeAdapter = require(\"./parse5-adapter-serialization\");\nconst NODE_TYPE = require(\"../node-type\");\nconst NAMESPACES = require(\"../helpers/namespaces\");\n\nfunction htmlSerialization(node) {\n  if (\n    node.nodeType === NODE_TYPE.ELEMENT_NODE &&\n    node.namespaceURI === NAMESPACES.HTML_NS &&\n    node.tagName === \"TEMPLATE\"\n  ) {\n    node = node.content;\n  }\n\n  return parse5.serialize(node, { treeAdapter });\n}\n\nmodule.exports.fragmentSerialization = (node, { requireWellFormed }) => {\n  const contextDocument =\n    node.nodeType === NODE_TYPE.DOCUMENT_NODE ? node : node._ownerDocument;\n  if (contextDocument._parsingMode === \"html\") {\n    return htmlSerialization(node);\n  }\n\n  const childNodes = node.childNodesForSerializing || node.childNodes;\n  let serialized = \"\";\n  for (let i = 0; i < childNodes.length; ++i) {\n    serialized += produceXMLSerialization(\n      utils.wrapperForImpl(childNodes[i] || childNodes.item(i)),\n      requireWellFormed\n    );\n  }\n  return serialized;\n};\n"]},"metadata":{},"sourceType":"script"}